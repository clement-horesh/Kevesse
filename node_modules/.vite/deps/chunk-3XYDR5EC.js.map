{
  "version": 3,
  "sources": ["../../@thirdweb-dev/react/dist/handleWCSessionRequest-785c9f07.browser.esm.js"],
  "sourcesContent": ["import { useCreateWalletInstance, useWalletContext } from '@thirdweb-dev/react-core';\nimport { useRef, useEffect } from 'react';\nimport { r as isAndroid, o as openWindow, s as isIOS, C as ConnectingScreen, i as isMobile } from './headlessConnectUI-c1f84a4b.browser.esm.js';\nimport { jsx } from 'react/jsx-runtime';\n\nconst WCOpenURI = _ref => {\n  let {\n    onBack,\n    onConnected,\n    walletConfig,\n    appUriPrefix,\n    supportLink,\n    hideBackButton\n  } = _ref;\n  const createInstance = useCreateWalletInstance();\n  const {\n    setConnectedWallet,\n    chainToConnect,\n    setConnectionStatus\n  } = useWalletContext();\n  const connectStarted = useRef(false);\n  useEffect(() => {\n    if (connectStarted.current) {\n      return;\n    }\n    connectStarted.current = true;\n    const wallet = createInstance(walletConfig);\n    setConnectionStatus(\"connecting\");\n    wallet.connectWithQrCode({\n      chainId: chainToConnect?.chainId,\n      onQrCodeUri(uri) {\n        if (isAndroid()) {\n          openWindow(`${appUriPrefix.android}wc?uri=${encodeURIComponent(uri)}`);\n        } else if (isIOS()) {\n          openWindow(`${appUriPrefix.ios}wc?uri=${encodeURIComponent(uri)}`);\n        } else {\n          openWindow(`${appUriPrefix.other}wc?uri=${encodeURIComponent(uri)}`);\n        }\n      },\n      onConnected() {\n        setConnectedWallet(wallet);\n        onConnected();\n      }\n    });\n  }, [createInstance, setConnectedWallet, chainToConnect, onConnected, walletConfig, setConnectionStatus, appUriPrefix]);\n  return /*#__PURE__*/jsx(ConnectingScreen, {\n    hideBackButton: hideBackButton,\n    onBack: onBack,\n    walletName: walletConfig.meta.name,\n    walletIconURL: walletConfig.meta.iconURL,\n    supportLink: supportLink\n  });\n};\n\nfunction handelWCSessionRequest(wallet, uris) {\n  if (isMobile()) {\n    wallet.on(\"wc_session_request_sent\", () => {\n      if (isAndroid()) {\n        openWindow(uris.android);\n      } else if (isIOS()) {\n        openWindow(uris.ios);\n      } else {\n        openWindow(uris.other);\n      }\n    });\n  }\n}\n\nexport { WCOpenURI as W, handelWCSessionRequest as h };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,mBAAkC;AAElC,yBAAoB;AAEpB,IAAM,YAAY,UAAQ;AACxB,MAAI;AAAA,IACF;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI;AACJ,QAAM,iBAAiB,wBAAwB;AAC/C,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI,iBAAiB;AACrB,QAAM,qBAAiB,qBAAO,KAAK;AACnC,8BAAU,MAAM;AACd,QAAI,eAAe,SAAS;AAC1B;AAAA,IACF;AACA,mBAAe,UAAU;AACzB,UAAM,SAAS,eAAe,YAAY;AAC1C,wBAAoB,YAAY;AAChC,WAAO,kBAAkB;AAAA,MACvB,SAAS,iDAAgB;AAAA,MACzB,YAAY,KAAK;AACf,YAAI,UAAU,GAAG;AACf,qBAAW,GAAG,aAAa,iBAAiB,mBAAmB,GAAG,GAAG;AAAA,QACvE,WAAW,MAAM,GAAG;AAClB,qBAAW,GAAG,aAAa,aAAa,mBAAmB,GAAG,GAAG;AAAA,QACnE,OAAO;AACL,qBAAW,GAAG,aAAa,eAAe,mBAAmB,GAAG,GAAG;AAAA,QACrE;AAAA,MACF;AAAA,MACA,cAAc;AACZ,2BAAmB,MAAM;AACzB,oBAAY;AAAA,MACd;AAAA,IACF,CAAC;AAAA,EACH,GAAG,CAAC,gBAAgB,oBAAoB,gBAAgB,aAAa,cAAc,qBAAqB,YAAY,CAAC;AACrH,aAAoB,wBAAI,kBAAkB;AAAA,IACxC;AAAA,IACA;AAAA,IACA,YAAY,aAAa,KAAK;AAAA,IAC9B,eAAe,aAAa,KAAK;AAAA,IACjC;AAAA,EACF,CAAC;AACH;AAEA,SAAS,uBAAuB,QAAQ,MAAM;AAC5C,MAAI,SAAS,GAAG;AACd,WAAO,GAAG,2BAA2B,MAAM;AACzC,UAAI,UAAU,GAAG;AACf,mBAAW,KAAK,OAAO;AAAA,MACzB,WAAW,MAAM,GAAG;AAClB,mBAAW,KAAK,GAAG;AAAA,MACrB,OAAO;AACL,mBAAW,KAAK,KAAK;AAAA,MACvB;AAAA,IACF,CAAC;AAAA,EACH;AACF;",
  "names": []
}
