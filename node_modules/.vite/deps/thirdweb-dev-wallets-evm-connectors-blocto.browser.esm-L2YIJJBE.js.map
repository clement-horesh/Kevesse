{
  "version": 3,
  "sources": ["../../@noble/curves/src/abstract/edwards.ts", "../../@noble/curves/src/abstract/montgomery.ts", "../../@noble/curves/src/ed25519.ts", "../../@solana/web3.js/node_modules/base-x/src/index.js", "../../@solana/web3.js/node_modules/bs58/index.js", "../../borsh/node_modules/base-x/src/index.js", "../../borsh/node_modules/bs58/index.js", "../../text-encoding-utf-8/src/encoding.js", "../../borsh/lib/index.js", "../../@solana/buffer-layout/src/Layout.ts", "../../bigint-buffer/dist/browser.js", "../../superstruct/src/error.ts", "../../superstruct/src/utils.ts", "../../superstruct/src/struct.ts", "../../superstruct/src/structs/utilities.ts", "../../superstruct/src/structs/types.ts", "../../superstruct/src/structs/coercions.ts", "../../superstruct/src/structs/refinements.ts", "../../jayson/node_modules/uuid/dist/esm-browser/rng.js", "../../jayson/node_modules/uuid/dist/esm-browser/regex.js", "../../jayson/node_modules/uuid/dist/esm-browser/validate.js", "../../jayson/node_modules/uuid/dist/esm-browser/stringify.js", "../../jayson/node_modules/uuid/dist/esm-browser/v1.js", "../../jayson/node_modules/uuid/dist/esm-browser/parse.js", "../../jayson/node_modules/uuid/dist/esm-browser/v35.js", "../../jayson/node_modules/uuid/dist/esm-browser/md5.js", "../../jayson/node_modules/uuid/dist/esm-browser/v3.js", "../../jayson/node_modules/uuid/dist/esm-browser/v4.js", "../../jayson/node_modules/uuid/dist/esm-browser/sha1.js", "../../jayson/node_modules/uuid/dist/esm-browser/v5.js", "../../jayson/node_modules/uuid/dist/esm-browser/nil.js", "../../jayson/node_modules/uuid/dist/esm-browser/version.js", "../../jayson/node_modules/uuid/dist/esm-browser/index.js", "../../jayson/lib/generateRequest.js", "../../jayson/lib/client/browser/index.js", "../../@babel/runtime/helpers/interopRequireDefault.js", "../../@babel/runtime/helpers/typeof.js", "../../@babel/runtime/helpers/regeneratorRuntime.js", "../../@babel/runtime/regenerator/index.js", "../../@babel/runtime/helpers/asyncToGenerator.js", "../../@babel/runtime/helpers/classCallCheck.js", "../../@babel/runtime/helpers/toPrimitive.js", "../../@babel/runtime/helpers/toPropertyKey.js", "../../@babel/runtime/helpers/createClass.js", "../../@babel/runtime/helpers/setPrototypeOf.js", "../../@babel/runtime/helpers/inherits.js", "../../@babel/runtime/helpers/assertThisInitialized.js", "../../@babel/runtime/helpers/possibleConstructorReturn.js", "../../@babel/runtime/helpers/getPrototypeOf.js", "../../rpc-websockets/node_modules/eventemitter3/index.js", "../../rpc-websockets/dist/lib/client.js", "../../rpc-websockets/dist/lib/client/websocket.browser.js", "../../@solana/web3.js/src/utils/ed25519.ts", "../../@solana/web3.js/src/utils/to-buffer.ts", "../../@solana/web3.js/src/utils/borsh-schema.ts", "../../@solana/web3.js/src/publickey.ts", "../../@solana/web3.js/src/account.ts", "../../@solana/web3.js/src/bpf-loader-deprecated.ts", "../../@solana/web3.js/src/transaction/constants.ts", "../../@solana/web3.js/src/transaction/expiry-custom-errors.ts", "../../@solana/web3.js/src/message/account-keys.ts", "../../@solana/web3.js/src/layout.ts", "../../@solana/web3.js/src/utils/shortvec-encoding.ts", "../../@solana/web3.js/src/utils/assert.ts", "../../@solana/web3.js/src/message/compiled-keys.ts", "../../@solana/web3.js/src/message/legacy.ts", "../../@solana/web3.js/src/message/v0.ts", "../../@solana/web3.js/src/message/versioned.ts", "../../@solana/web3.js/src/transaction/legacy.ts", "../../@solana/web3.js/src/transaction/message.ts", "../../@solana/web3.js/src/transaction/versioned.ts", "../../@solana/web3.js/src/timing.ts", "../../@solana/web3.js/src/sysvar.ts", "../../@solana/web3.js/src/utils/send-and-confirm-transaction.ts", "../../@solana/web3.js/src/utils/sleep.ts", "../../@solana/web3.js/src/instruction.ts", "../../@solana/web3.js/src/fee-calculator.ts", "../../@solana/web3.js/src/nonce-account.ts", "../../@solana/web3.js/src/utils/bigint.ts", "../../@solana/web3.js/src/programs/system.ts", "../../@solana/web3.js/src/loader.ts", "../../@solana/web3.js/src/bpf-loader.ts", "../../node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js", "../../@solana/web3.js/src/epoch-schedule.ts", "../../@solana/web3.js/src/errors.ts", "../../@solana/web3.js/src/__forks__/browser/fetch-impl.ts", "../../@solana/web3.js/src/rpc-websocket.ts", "../../@solana/web3.js/src/account-data.ts", "../../@solana/web3.js/src/programs/address-lookup-table/state.ts", "../../@solana/web3.js/src/utils/makeWebsocketUrl.ts", "../../@solana/web3.js/src/connection.ts", "../../@solana/web3.js/src/keypair.ts", "../../@solana/web3.js/src/programs/address-lookup-table/index.ts", "../../@solana/web3.js/src/programs/compute-budget.ts", "../../@solana/web3.js/src/programs/ed25519.ts", "../../@solana/web3.js/src/utils/secp256k1.ts", "../../@solana/web3.js/src/programs/secp256k1.ts", "../../@solana/web3.js/src/programs/stake.ts", "../../@solana/web3.js/src/programs/vote.ts", "../../@solana/web3.js/src/validator-info.ts", "../../@solana/web3.js/src/vote-account.ts", "../../@solana/web3.js/src/utils/cluster.ts", "../../@solana/web3.js/src/utils/send-and-confirm-raw-transaction.ts", "../../@solana/web3.js/src/index.ts", "../../@thirdweb-dev/wallets/evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.browser.esm.js", "../../@blocto/sdk/dist/blocto-sdk.module.js"],
  "sourcesContent": ["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Twisted Edwards curve. The formula is: ax\u00B2 + y\u00B2 = 1 + dx\u00B2y\u00B2\nimport { mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes, FHash, Hex } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n\n// Edwards curves must declare params a & d.\nexport type CurveType = BasicCurve<bigint> & {\n  a: bigint; // curve param a\n  d: bigint; // curve param d\n  hash: FHash; // Hashing\n  randomBytes: (bytesLength?: number) => Uint8Array; // CSPRNG\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array; // clears bits to get valid field elemtn\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array; // Used for hashing\n  uvRatio?: (u: bigint, v: bigint) => { isValid: boolean; value: bigint }; // Ratio \u221A(u/v)\n  prehash?: FHash; // RFC 8032 pre-hashing of messages to sign() / verify()\n  mapToCurve?: (scalar: bigint[]) => AffinePoint<bigint>; // for hash-to-curve standard\n};\n\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    curve,\n    {\n      hash: 'function',\n      a: 'bigint',\n      d: 'bigint',\n      randomBytes: 'function',\n    },\n    {\n      adjustScalarBytes: 'function',\n      domain: 'function',\n      uvRatio: 'function',\n      mapToCurve: 'function',\n    }\n  );\n  // Set defaults\n  return Object.freeze({ ...opts } as const);\n}\n\n// Instance of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointType extends Group<ExtPointType> {\n  readonly ex: bigint;\n  readonly ey: bigint;\n  readonly ez: bigint;\n  readonly et: bigint;\n  get x(): bigint;\n  get y(): bigint;\n  assertValidity(): void;\n  multiply(scalar: bigint): ExtPointType;\n  multiplyUnsafe(scalar: bigint): ExtPointType;\n  isSmallOrder(): boolean;\n  isTorsionFree(): boolean;\n  clearCofactor(): ExtPointType;\n  toAffine(iz?: bigint): AffinePoint<bigint>;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n}\n// Static methods of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointConstructor extends GroupConstructor<ExtPointType> {\n  new (x: bigint, y: bigint, z: bigint, t: bigint): ExtPointType;\n  fromAffine(p: AffinePoint<bigint>): ExtPointType;\n  fromHex(hex: Hex): ExtPointType;\n  fromPrivateKey(privateKey: Hex): ExtPointType;\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  sign: (message: Hex, privateKey: Hex, options?: { context?: Hex }) => Uint8Array;\n  verify: (\n    sig: Hex,\n    message: Hex,\n    publicKey: Hex,\n    options?: { context?: Hex; zip215: boolean }\n  ) => boolean;\n  ExtendedPoint: ExtPointConstructor;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    getExtendedPublicKey: (key: Hex) => {\n      head: Uint8Array;\n      prefix: Uint8Array;\n      scalar: bigint;\n      point: ExtPointType;\n      pointBytes: Uint8Array;\n    };\n  };\n};\n\n// It is not generic twisted curve for now, but ed25519/ed448 generic implementation\nexport function twistedEdwards(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const {\n    Fp,\n    n: CURVE_ORDER,\n    prehash: prehash,\n    hash: cHash,\n    randomBytes,\n    nByteLength,\n    h: cofactor,\n  } = CURVE;\n  const MASK = _2n << (BigInt(nByteLength * 8) - _1n);\n  const modP = Fp.create; // Function overrides\n\n  // sqrt(u/v)\n  const uvRatio =\n    CURVE.uvRatio ||\n    ((u: bigint, v: bigint) => {\n      try {\n        return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n      } catch (e) {\n        return { isValid: false, value: _0n };\n      }\n    });\n  const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes: Uint8Array) => bytes); // NOOP\n  const domain =\n    CURVE.domain ||\n    ((data: Uint8Array, ctx: Uint8Array, phflag: boolean) => {\n      if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n      return data;\n    }); // NOOP\n  const inBig = (n: bigint) => typeof n === 'bigint' && _0n < n; // n in [1..]\n  const inRange = (n: bigint, max: bigint) => inBig(n) && inBig(max) && n < max; // n in [1..max-1]\n  const in0MaskRange = (n: bigint) => n === _0n || inRange(n, MASK); // n in [0..MASK-1]\n  function assertInRange(n: bigint, max: bigint) {\n    // n in [1..max-1]\n    if (inRange(n, max)) return n;\n    throw new Error(`Expected valid scalar < ${max}, got ${typeof n} ${n}`);\n  }\n  function assertGE0(n: bigint) {\n    // n in [0..CURVE_ORDER-1]\n    return n === _0n ? n : assertInRange(n, CURVE_ORDER); // GE = prime subgroup, not full group\n  }\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function isPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Extended Point works in extended coordinates: (x, y, z, t) \u220B (x=x/z, y=y/z, t=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point implements ExtPointType {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    static readonly ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n\n    constructor(\n      readonly ex: bigint,\n      readonly ey: bigint,\n      readonly ez: bigint,\n      readonly et: bigint\n    ) {\n      if (!in0MaskRange(ex)) throw new Error('x required');\n      if (!in0MaskRange(ey)) throw new Error('y required');\n      if (!in0MaskRange(ez)) throw new Error('z required');\n      if (!in0MaskRange(et)) throw new Error('t required');\n    }\n\n    get x(): bigint {\n      return this.toAffine().x;\n    }\n    get y(): bigint {\n      return this.toAffine().y;\n    }\n\n    static fromAffine(p: AffinePoint<bigint>): Point {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const { x, y } = p || {};\n      if (!in0MaskRange(x) || !in0MaskRange(y)) throw new Error('invalid affine point');\n      return new Point(x, y, _1n, modP(x * y));\n    }\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.ez));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n    // Not required for fromHex(), which always creates valid points.\n    // Could be useful for fromAffine().\n    assertValidity(): void {\n      const { a, d } = CURVE;\n      if (this.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n      // Equation in affine coordinates: ax\u00B2 + y\u00B2 = 1 + dx\u00B2y\u00B2\n      // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX\u00B2 + Y\u00B2)Z\u00B2 = Z\u2074 + dX\u00B2Y\u00B2\n      const { ex: X, ey: Y, ez: Z, et: T } = this;\n      const X2 = modP(X * X); // X\u00B2\n      const Y2 = modP(Y * Y); // Y\u00B2\n      const Z2 = modP(Z * Z); // Z\u00B2\n      const Z4 = modP(Z2 * Z2); // Z\u2074\n      const aX2 = modP(X2 * a); // aX\u00B2\n      const left = modP(Z2 * modP(aX2 + Y2)); // (aX\u00B2 + Y\u00B2)Z\u00B2\n      const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z\u2074 + dX\u00B2Y\u00B2\n      if (left !== right) throw new Error('bad point: equation left != right (1)');\n      // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n      const XY = modP(X * Y);\n      const ZT = modP(Z * T);\n      if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    }\n\n    // Compare one point to another.\n    equals(other: Point): boolean {\n      isPoint(other);\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2 } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n\n    protected is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    negate(): Point {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n    }\n\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double(): Point {\n      const { a } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other: Point) {\n      isPoint(other);\n      const { a, d } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n      // Faster algo for adding 2 Extended Points when curve's a=-1.\n      // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n      // Cost: 8M + 8add + 2*2.\n      // Note: It does not check whether the `other` point is valid.\n      if (a === BigInt(-1)) {\n        const A = modP((Y1 - X1) * (Y2 + X2));\n        const B = modP((Y1 + X1) * (Y2 - X2));\n        const F = modP(B - A);\n        if (F === _0n) return this.double(); // Same point. Tests say it doesn't affect timing\n        const C = modP(Z1 * _2n * T2);\n        const D = modP(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = modP(E * F);\n        const Y3 = modP(G * H);\n        const T3 = modP(E * H);\n        const Z3 = modP(F * G);\n        return new Point(X3, Y3, Z3, T3);\n      }\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    subtract(other: Point): Point {\n      return this.add(other.negate());\n    }\n\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, Point.normalizeZ);\n    }\n\n    // Constant-time multiplication.\n    multiply(scalar: bigint): Point {\n      const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));\n      return Point.normalizeZ([p, f])[0];\n    }\n\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    multiplyUnsafe(scalar: bigint): Point {\n      let n = assertGE0(scalar); // 0 <= scalar < CURVE.n\n      if (n === _0n) return I;\n      if (this.equals(I) || n === _1n) return this;\n      if (this.equals(G)) return this.wNAF(n).p;\n      return wnaf.unsafeLadder(this, n);\n    }\n\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder(): boolean {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree(): boolean {\n      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n    }\n\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(iz?: bigint): AffinePoint<bigint> {\n      const { ex: x, ey: y, ez: z } = this;\n      const is0 = this.is0();\n      if (iz == null) iz = is0 ? _8n : (Fp.inv(z) as bigint); // 8 was chosen arbitrarily\n      const ax = modP(x * iz);\n      const ay = modP(y * iz);\n      const zz = modP(z * iz);\n      if (is0) return { x: _0n, y: _1n };\n      if (zz !== _1n) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n\n    clearCofactor(): Point {\n      const { h: cofactor } = CURVE;\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(hex: Hex, zip215 = false): Point {\n      const { d, a } = CURVE;\n      const len = Fp.BYTES;\n      hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n      const normed = hex.slice(); // copy again, we'll manipulate it\n      const lastByte = hex[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = ut.bytesToNumberLE(normed);\n      if (y === _0n) {\n        // y=0 is allowed\n      } else {\n        // RFC8032 prohibits >= p, but ZIP215 doesn't\n        if (zip215) assertInRange(y, MASK); // zip215=true [1..P-1] (2^255-19-1 for ed25519)\n        else assertInRange(y, Fp.ORDER); // zip215=false [1..MASK-1] (2^256-1 for ed25519)\n      }\n\n      // Ed25519: x\u00B2 = (y\u00B2-1)/(dy\u00B2+1) mod p. Ed448: x\u00B2 = (y\u00B2-1)/(dy\u00B2-1) mod p. Generic case:\n      // ax\u00B2+y\u00B2=1+dx\u00B2y\u00B2 => y\u00B2-1=dx\u00B2y\u00B2-ax\u00B2 => y\u00B2-1=x\u00B2(dy\u00B2-a) => x\u00B2=(y\u00B2-1)/(dy\u00B2-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y\u00B2 - 1\n      const v = modP(d * y2 - a); // v = d y\u00B2 + 1.\n      let { isValid, value: x } = uvRatio(u, v); // \u221A(u/v)\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n      if (!zip215 && x === _0n && isLastByteOdd)\n        // if x=0 and x_0 = 1, fail\n        throw new Error('Point.fromHex: x=0 and x_0=1');\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({ x, y });\n    }\n    static fromPrivateKey(privKey: Hex) {\n      return getExtendedPublicKey(privKey).point;\n    }\n    toRawBytes(): Uint8Array {\n      const { x, y } = this.toAffine();\n      const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n      return bytes; // and use the last byte to encode sign of x\n    }\n    toHex(): string {\n      return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n    }\n  }\n  const { BASE: G, ZERO: I } = Point;\n  const wnaf = wNAF(Point, nByteLength * 8);\n\n  function modN(a: bigint) {\n    return mod(a, CURVE_ORDER);\n  }\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash: Uint8Array): bigint {\n    return modN(ut.bytesToNumberLE(hash));\n  }\n\n  /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n  function getExtendedPublicKey(key: Hex) {\n    const len = nByteLength;\n    key = ensureBytes('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    const point = G.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toRawBytes(); // Uint8Array representation\n    return { head, prefix, scalar, point, pointBytes };\n  }\n\n  // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n  function getPublicKey(privKey: Hex): Uint8Array {\n    return getExtendedPublicKey(privKey).pointBytes;\n  }\n\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar(context: Hex = new Uint8Array(), ...msgs: Uint8Array[]) {\n    const msg = ut.concatBytes(...msgs);\n    return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n  }\n\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg: Hex, privKey: Hex, options: { context?: Hex } = {}): Uint8Array {\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = G.multiply(r).toRawBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = modN(r + k * scalar); // S = (r + k * s) mod L\n    assertGE0(s); // 0 <= s < l\n    const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n    return ensureBytes('result', res, nByteLength * 2); // 64-byte signature\n  }\n\n  const verifyOpts: { context?: Hex; zip215?: boolean } = VERIFY_DEFAULT;\n  function verify(sig: Hex, msg: Hex, publicKey: Hex, options = verifyOpts): boolean {\n    const { context, zip215 } = options;\n    const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n    sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n\n    const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n    // zip215: true is good for consensus-critical apps and allows points < 2^256\n    // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p\n    let A, R, SB;\n    try {\n      A = Point.fromHex(publicKey, zip215);\n      R = Point.fromHex(sig.slice(0, len), zip215);\n      SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n    if (!zip215 && A.isSmallOrder()) return false;\n\n    const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n  }\n\n  G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n\n  const utils = {\n    getExtendedPublicKey,\n    // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n    randomPrivateKey: (): Uint8Array => randomBytes(Fp.BYTES),\n\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3));\n      return point;\n    },\n  };\n\n  return {\n    CURVE,\n    getPublicKey,\n    sign,\n    verify,\n    ExtendedPoint: Point,\n    utils,\n  };\n}\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { mod, pow } from './modular.js';\nimport { bytesToNumberLE, ensureBytes, numberToBytesLE, validateObject } from './utils.js';\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\ntype Hex = string | Uint8Array;\n\nexport type CurveType = {\n  P: bigint; // finite field prime\n  nByteLength: number;\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array;\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array;\n  a: bigint;\n  montgomeryBits: number;\n  powPminus2?: (x: bigint) => bigint;\n  xyToU?: (x: bigint, y: bigint) => bigint;\n  Gu: bigint;\n  randomBytes?: (bytesLength?: number) => Uint8Array;\n};\nexport type CurveFn = {\n  scalarMult: (scalar: Hex, u: Hex) => Uint8Array;\n  scalarMultBase: (scalar: Hex) => Uint8Array;\n  getSharedSecret: (privateKeyA: Hex, publicKeyB: Hex) => Uint8Array;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  utils: { randomPrivateKey: () => Uint8Array };\n  GuBytes: Uint8Array;\n};\n\nfunction validateOpts(curve: CurveType) {\n  validateObject(\n    curve,\n    {\n      a: 'bigint',\n    },\n    {\n      montgomeryBits: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n      adjustScalarBytes: 'function',\n      domain: 'function',\n      powPminus2: 'function',\n      Gu: 'bigint',\n    }\n  );\n  // Set defaults\n  return Object.freeze({ ...curve } as const);\n}\n\n// NOTE: not really montgomery curve, just bunch of very specific methods for X25519/X448 (RFC 7748, https://www.rfc-editor.org/rfc/rfc7748)\n// Uses only one coordinate instead of two\nexport function montgomery(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef);\n  const { P } = CURVE;\n  const modP = (n: bigint) => mod(n, P);\n  const montgomeryBits = CURVE.montgomeryBits;\n  const montgomeryBytes = Math.ceil(montgomeryBits / 8);\n  const fieldLen = CURVE.nByteLength;\n  const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes: Uint8Array) => bytes);\n  const powPminus2 = CURVE.powPminus2 || ((x: bigint) => pow(x, P - BigInt(2), P));\n\n  // cswap from RFC7748. But it is not from RFC7748!\n  /*\n    cswap(swap, x_2, x_3):\n         dummy = mask(swap) AND (x_2 XOR x_3)\n         x_2 = x_2 XOR dummy\n         x_3 = x_3 XOR dummy\n         Return (x_2, x_3)\n  Where mask(swap) is the all-1 or all-0 word of the same length as x_2\n   and x_3, computed, e.g., as mask(swap) = 0 - swap.\n  */\n  function cswap(swap: bigint, x_2: bigint, x_3: bigint): [bigint, bigint] {\n    const dummy = modP(swap * (x_2 - x_3));\n    x_2 = modP(x_2 - dummy);\n    x_3 = modP(x_3 + dummy);\n    return [x_2, x_3];\n  }\n\n  // Accepts 0 as well\n  function assertFieldElement(n: bigint): bigint {\n    if (typeof n === 'bigint' && _0n <= n && n < P) return n;\n    throw new Error('Expected valid scalar 0 < scalar < CURVE.P');\n  }\n\n  // x25519 from 4\n  // The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519\n  const a24 = (CURVE.a - BigInt(2)) / BigInt(4);\n  /**\n   *\n   * @param pointU u coordinate (x) on Montgomery Curve 25519\n   * @param scalar by which the point would be multiplied\n   * @returns new Point on Montgomery curve\n   */\n  function montgomeryLadder(pointU: bigint, scalar: bigint): bigint {\n    const u = assertFieldElement(pointU);\n    // Section 5: Implementations MUST accept non-canonical values and process them as\n    // if they had been reduced modulo the field prime.\n    const k = assertFieldElement(scalar);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw: [bigint, bigint];\n    for (let t = BigInt(montgomeryBits - 1); t >= _0n; t--) {\n      const k_t = (k >> t) & _1n;\n      swap ^= k_t;\n      sw = cswap(swap, x_2, x_3);\n      x_2 = sw[0];\n      x_3 = sw[1];\n      sw = cswap(swap, z_2, z_3);\n      z_2 = sw[0];\n      z_3 = sw[1];\n      swap = k_t;\n\n      const A = x_2 + z_2;\n      const AA = modP(A * A);\n      const B = x_2 - z_2;\n      const BB = modP(B * B);\n      const E = AA - BB;\n      const C = x_3 + z_3;\n      const D = x_3 - z_3;\n      const DA = modP(D * A);\n      const CB = modP(C * B);\n      const dacb = DA + CB;\n      const da_cb = DA - CB;\n      x_3 = modP(dacb * dacb);\n      z_3 = modP(x_1 * modP(da_cb * da_cb));\n      x_2 = modP(AA * BB);\n      z_2 = modP(E * (AA + modP(a24 * E)));\n    }\n    // (x_2, x_3) = cswap(swap, x_2, x_3)\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    // (z_2, z_3) = cswap(swap, z_2, z_3)\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    // z_2^(p - 2)\n    const z2 = powPminus2(z_2);\n    // Return x_2 * (z_2^(p - 2))\n    return modP(x_2 * z2);\n  }\n\n  function encodeUCoordinate(u: bigint): Uint8Array {\n    return numberToBytesLE(modP(u), montgomeryBytes);\n  }\n\n  function decodeUCoordinate(uEnc: Hex): bigint {\n    // Section 5: When receiving such an array, implementations of X25519\n    // MUST mask the most significant bit in the final byte.\n    // This is very ugly way, but it works because fieldLen-1 is outside of bounds for X448, so this becomes NOOP\n    // fieldLen - scalaryBytes = 1 for X448 and = 0 for X25519\n    const u = ensureBytes('u coordinate', uEnc, montgomeryBytes);\n    // u[fieldLen-1] crashes QuickJS (TypeError: out-of-bound numeric index)\n    if (fieldLen === montgomeryBytes) u[fieldLen - 1] &= 127; // 0b0111_1111\n    return bytesToNumberLE(u);\n  }\n  function decodeScalar(n: Hex): bigint {\n    const bytes = ensureBytes('scalar', n);\n    if (bytes.length !== montgomeryBytes && bytes.length !== fieldLen)\n      throw new Error(`Expected ${montgomeryBytes} or ${fieldLen} bytes, got ${bytes.length}`);\n    return bytesToNumberLE(adjustScalarBytes(bytes));\n  }\n  function scalarMult(scalar: Hex, u: Hex): Uint8Array {\n    const pointU = decodeUCoordinate(u);\n    const _scalar = decodeScalar(scalar);\n    const pu = montgomeryLadder(pointU, _scalar);\n    // The result was not contributory\n    // https://cr.yp.to/ecdh.html#validate\n    if (pu === _0n) throw new Error('Invalid private or public key received');\n    return encodeUCoordinate(pu);\n  }\n  // Computes public key from private. By doing scalar multiplication of base point.\n  const GuBytes = encodeUCoordinate(CURVE.Gu);\n  function scalarMultBase(scalar: Hex): Uint8Array {\n    return scalarMult(scalar, GuBytes);\n  }\n\n  return {\n    scalarMult,\n    scalarMultBase,\n    getSharedSecret: (privateKey: Hex, publicKey: Hex) => scalarMult(privateKey, publicKey),\n    getPublicKey: (privateKey: Hex): Uint8Array => scalarMultBase(privateKey),\n    utils: { randomPrivateKey: () => CURVE.randomBytes!(CURVE.nByteLength) },\n    GuBytes: GuBytes,\n  };\n}\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { ExtPointType, twistedEdwards } from './abstract/edwards.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport {\n  bytesToHex,\n  bytesToNumberLE,\n  ensureBytes,\n  equalBytes,\n  Hex,\n  numberToBytesLE,\n} from './abstract/utils.js';\nimport { createHasher, htfBasicOpts, expand_message_xmd } from './abstract/hash-to-curve.js';\nimport { AffinePoint } from './abstract/curve.js';\n\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */\n\nconst ED25519_P = BigInt(\n  '57896044618658097711785492504343953926634992332820282019728792003956564819949'\n);\n// \u221A(-1) aka \u221A(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = BigInt(\n  '19681161376707505956807079304988542015446066515923890162744021073123829784752'\n);\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _5n = BigInt(5);\n// prettier-ignore\nconst _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\n\nfunction ed25519_pow_2_252_3(x: bigint) {\n  const P = ED25519_P;\n  const x2 = (x * x) % P;\n  const b2 = (x2 * x) % P; // x^3, 11\n  const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n  const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n  const b10 = (pow2(b5, _5n, P) * b5) % P;\n  const b20 = (pow2(b10, _10n, P) * b10) % P;\n  const b40 = (pow2(b20, _20n, P) * b20) % P;\n  const b80 = (pow2(b40, _40n, P) * b40) % P;\n  const b160 = (pow2(b80, _80n, P) * b80) % P;\n  const b240 = (pow2(b160, _80n, P) * b80) % P;\n  const b250 = (pow2(b240, _10n, P) * b10) % P;\n  const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n  // ^ To pow to (p+3)/8, multiply it by x.\n  return { pow_p_5_8, b2 };\n}\n\nfunction adjustScalarBytes(bytes: Uint8Array): Uint8Array {\n  // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n  // set the three least significant bits of the first byte\n  bytes[0] &= 248; // 0b1111_1000\n  // and the most significant bit of the last to zero,\n  bytes[31] &= 127; // 0b0111_1111\n  // set the second most significant bit of the last byte to 1\n  bytes[31] |= 64; // 0b0100_0000\n  return bytes;\n}\n\n// sqrt(u/v)\nfunction uvRatio(u: bigint, v: bigint): { isValid: boolean; value: bigint } {\n  const P = ED25519_P;\n  const v3 = mod(v * v * v, P); // v\u00B3\n  const v7 = mod(v3 * v3 * v, P); // v\u2077\n  // (p+3)/8 and (p-5)/8\n  const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n  let x = mod(u * v3 * pow, P); // (uv\u00B3)(uv\u2077)^(p-5)/8\n  const vx2 = mod(v * x * x, P); // vx\u00B2\n  const root1 = x; // First root candidate\n  const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n  const useRoot1 = vx2 === u; // If vx\u00B2 = u (mod p), x is a square root\n  const useRoot2 = vx2 === mod(-u, P); // If vx\u00B2 = -u, set x <-- x * 2^((p-1)/4)\n  const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx\u00B2 = -u\u221A(-1)\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n  if (isNegativeLE(x, P)) x = mod(-x, P);\n  return { isValid: useRoot1 || useRoot2, value: x };\n}\n\n// Just in case\nexport const ED25519_TORSION_SUBGROUP = [\n  '0100000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n  '0000000000000000000000000000000000000000000000000000000000000080',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n  'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n  '0000000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\n\nconst Fp = Field(ED25519_P, undefined, true);\n\nconst ed25519Defaults = {\n  // Param: a\n  a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n  // d is equal to -121665/121666 over finite field.\n  // Negative number is P - number, and division is invert(number, P)\n  d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n  // Finite field \uD835\uDD3Dp over which we'll do calculations; 2n**255n - 19n\n  Fp,\n  // Subgroup order: how many points curve has\n  // 2n**252n + 27742317777372353535851937790883648493n;\n  n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n  // Cofactor\n  h: BigInt(8),\n  // Base point (x, y) aka generator point\n  Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n  Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n  hash: sha512,\n  randomBytes,\n  adjustScalarBytes,\n  // dom2\n  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n  // Constant-time, u/\u221Av\n  uvRatio,\n} as const;\n\nexport const ed25519 = twistedEdwards(ed25519Defaults);\n\nfunction ed25519_domain(data: Uint8Array, ctx: Uint8Array, phflag: boolean) {\n  if (ctx.length > 255) throw new Error('Context is too big');\n  return concatBytes(\n    utf8ToBytes('SigEd25519 no Ed25519 collisions'),\n    new Uint8Array([phflag ? 1 : 0, ctx.length]),\n    ctx,\n    data\n  );\n}\n\nexport const ed25519ctx = twistedEdwards({ ...ed25519Defaults, domain: ed25519_domain });\nexport const ed25519ph = twistedEdwards({\n  ...ed25519Defaults,\n  domain: ed25519_domain,\n  prehash: sha512,\n});\n\nexport const x25519 = /* @__PURE__ */ (() =>\n  montgomery({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255, // n is 253 bits\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (x: bigint): bigint => {\n      const P = ED25519_P;\n      // x^(p-2) aka x^(2^255-21)\n      const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n      return mod(pow2(pow_p_5_8, BigInt(3), P) * b2, P);\n    },\n    adjustScalarBytes,\n    randomBytes,\n  }))();\n\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub: Hex): Uint8Array {\n  const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n  const _1n = BigInt(1);\n  return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv: Uint8Array): Uint8Array {\n  const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n  return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\n\nconst ELL2_C1 = (Fp.ORDER + BigInt(3)) / BigInt(8); // 1. c1 = (q + 3) / 8       # Integer arithmetic\n\nconst ELL2_C2 = Fp.pow(_2n, ELL2_C1); // 2. c2 = 2^c1\nconst ELL2_C3 = Fp.sqrt(Fp.neg(Fp.ONE)); // 3. c3 = sqrt(-1)\nconst ELL2_C4 = (Fp.ORDER - BigInt(5)) / BigInt(8); // 4. c4 = (q - 5) / 8       # Integer arithmetic\nconst ELL2_J = BigInt(486662);\n\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u: bigint) {\n  let tv1 = Fp.sqr(u);       //  1.  tv1 = u^2\n  tv1 = Fp.mul(tv1, _2n);       //  2.  tv1 = 2 * tv1\n  let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n  let x1n = Fp.neg(ELL2_J);  //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n  let tv2 = Fp.sqr(xd);      //  5.  tv2 = xd^2\n  let gxd = Fp.mul(tv2, xd);    //  6.  gxd = tv2 * xd        # gxd = xd^3\n  let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n  gx1 = Fp.mul(gx1, x1n);       //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n  gx1 = Fp.add(gx1, tv2);       //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n  gx1 = Fp.mul(gx1, x1n);       //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n  let tv3 = Fp.sqr(gxd);     //  11. tv3 = gxd^2\n  tv2 = Fp.sqr(tv3);         //  12. tv2 = tv3^2           # gxd^4\n  tv3 = Fp.mul(tv3, gxd);       //  13. tv3 = tv3 * gxd       # gxd^3\n  tv3 = Fp.mul(tv3, gx1);       //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n  tv2 = Fp.mul(tv2, tv3);       //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n  let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n  y11 = Fp.mul(y11, tv3);       //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n  let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n  tv2 = Fp.sqr(y11);         //  19. tv2 = y11^2\n  tv2 = Fp.mul(tv2, gxd);       //  20. tv2 = tv2 * gxd\n  let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n  let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n  let x2n = Fp.mul(x1n, tv1);   //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n  let y21 = Fp.mul(y11, u);     //  24. y21 = y11 * u\n  y21 = Fp.mul(y21, ELL2_C2);   //  25. y21 = y21 * c2\n  let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n  let gx2 = Fp.mul(gx1, tv1);   //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n  tv2 = Fp.sqr(y21);         //  28. tv2 = y21^2\n  tv2 = Fp.mul(tv2, gxd);       //  29. tv2 = tv2 * gxd\n  let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n  let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n  tv2 = Fp.sqr(y1);          //  32. tv2 = y1^2\n  tv2 = Fp.mul(tv2, gxd);       //  33. tv2 = tv2 * gxd\n  let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n  let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n  let y = Fp.cmov(y2, y1, e3);  //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n  let e4 = Fp.isOdd(y);         //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n  y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n  return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\n\nconst ELL2_C1_EDWARDS = FpSqrtEven(Fp, Fp.neg(BigInt(486664))); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u: bigint) {\n  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n  // map_to_curve_elligator2_curve25519(u)\n  let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n  xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n  let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n  let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n  let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n  let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n  let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n  xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n  xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n  yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n  yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n\n  const inv = Fp.invertBatch([xd, yd]); // batch division\n  return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\n\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    ed25519.ExtendedPoint,\n    (scalars: bigint[]) => map_to_curve_elligator2_edwards25519(scalars[0]),\n    {\n      DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n      encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha512,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n\nfunction assertRstPoint(other: unknown) {\n  if (!(other instanceof RistPoint)) throw new Error('RistrettoPoint expected');\n}\n\n// \u221A(-1) aka \u221A(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// \u221A(ad - 1)\nconst SQRT_AD_MINUS_ONE = BigInt(\n  '25063068953384623474111414158702152701244531502492656460079210482610430750235'\n);\n// 1 / \u221A(a-d)\nconst INVSQRT_A_MINUS_D = BigInt(\n  '54469307008909316920995813868745141605393597292927456921205312896311721017578'\n);\n// 1-d\u00B2\nconst ONE_MINUS_D_SQ = BigInt(\n  '1159843021668779879193775521855586647937357759715417654439879720876111806838'\n);\n// (d-1)\u00B2\nconst D_MINUS_ONE_SQ = BigInt(\n  '40440834346308536858101042469323190826248399146238708352240133220865137265952'\n);\n// Calculates 1/\u221A(number)\nconst invertSqrt = (number: bigint) => uvRatio(_1n, number);\n\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes255ToNumberLE = (bytes: Uint8Array) =>\n  ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n\ntype ExtendedPoint = ExtPointType;\n\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0: bigint): ExtendedPoint {\n  const { d } = ed25519.CURVE;\n  const P = ed25519.CURVE.Fp.ORDER;\n  const mod = ed25519.CURVE.Fp.create;\n  const r = mod(SQRT_M1 * r0 * r0); // 1\n  const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n  let c = BigInt(-1); // 3\n  const D = mod((c - d * r) * mod(r + d)); // 4\n  let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n  let s_ = mod(s * r0); // 6\n  if (!isNegativeLE(s_, P)) s_ = mod(-s_);\n  if (!Ns_D_is_sq) s = s_; // 7\n  if (!Ns_D_is_sq) c = r; // 8\n  const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n  const s2 = s * s;\n  const W0 = mod((s + s) * D); // 10\n  const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n  const W2 = mod(_1n - s2); // 12\n  const W3 = mod(_1n + s2); // 13\n  return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint {\n  static BASE: RistPoint;\n  static ZERO: RistPoint;\n  // Private property to discourage combining ExtendedPoint + RistrettoPoint\n  // Always use Ristretto encoding/decoding instead.\n  constructor(private readonly ep: ExtendedPoint) {}\n\n  static fromAffine(ap: AffinePoint<bigint>) {\n    return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n  }\n\n  /**\n   * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n   * The hash-to-group operation applies Elligator twice and adds the results.\n   * **Note:** this is one-way map, there is no conversion from point to hash.\n   * https://ristretto.group/formulas/elligator.html\n   * @param hex 64-byte output of a hash function\n   */\n  static hashToCurve(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHash', hex, 64);\n    const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n    const R1 = calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n    const R2 = calcElligatorRistrettoMap(r2);\n    return new RistPoint(R1.add(R2));\n  }\n\n  /**\n   * Converts ristretto-encoded string to ristretto point.\n   * https://ristretto.group/formulas/decoding.html\n   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n   */\n  static fromHex(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHex', hex, 32);\n    const { a, d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n    const s = bytes255ToNumberLE(hex);\n    // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n    // 3. Check that s is non-negative, or else abort\n    if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P)) throw new Error(emsg);\n    const s2 = mod(s * s);\n    const u1 = mod(_1n + a * s2); // 4 (a is -1)\n    const u2 = mod(_1n - a * s2); // 5\n    const u1_2 = mod(u1 * u1);\n    const u2_2 = mod(u2 * u2);\n    const v = mod(a * d * u1_2 - u2_2); // 6\n    const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n    const Dx = mod(I * u2); // 8\n    const Dy = mod(I * Dx * v); // 9\n    let x = mod((s + s) * Dx); // 10\n    if (isNegativeLE(x, P)) x = mod(-x); // 10\n    const y = mod(u1 * Dy); // 11\n    const t = mod(x * y); // 12\n    if (!isValid || isNegativeLE(t, P) || y === _0n) throw new Error(emsg);\n    return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n  }\n\n  /**\n   * Encodes ristretto point to Uint8Array.\n   * https://ristretto.group/formulas/encoding.html\n   */\n  toRawBytes(): Uint8Array {\n    let { ex: x, ey: y, ez: z, et: t } = this.ep;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const u1 = mod(mod(z + y) * mod(z - y)); // 1\n    const u2 = mod(x * y); // 2\n    // Square root always exists\n    const u2sq = mod(u2 * u2);\n    const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n    const D1 = mod(invsqrt * u1); // 4\n    const D2 = mod(invsqrt * u2); // 5\n    const zInv = mod(D1 * D2 * t); // 6\n    let D: bigint; // 7\n    if (isNegativeLE(t * zInv, P)) {\n      let _x = mod(y * SQRT_M1);\n      let _y = mod(x * SQRT_M1);\n      x = _x;\n      y = _y;\n      D = mod(D1 * INVSQRT_A_MINUS_D);\n    } else {\n      D = D2; // 8\n    }\n    if (isNegativeLE(x * zInv, P)) y = mod(-y); // 9\n    let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n    if (isNegativeLE(s, P)) s = mod(-s);\n    return numberToBytesLE(s, 32); // 11\n  }\n\n  toHex(): string {\n    return bytesToHex(this.toRawBytes());\n  }\n\n  toString(): string {\n    return this.toHex();\n  }\n\n  // Compare one point to another.\n  equals(other: RistPoint): boolean {\n    assertRstPoint(other);\n    const { ex: X1, ey: Y1 } = this.ep;\n    const { ex: X2, ey: Y2 } = other.ep;\n    const mod = ed25519.CURVE.Fp.create;\n    // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n    const one = mod(X1 * Y2) === mod(Y1 * X2);\n    const two = mod(Y1 * Y2) === mod(X1 * X2);\n    return one || two;\n  }\n\n  add(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.add(other.ep));\n  }\n\n  subtract(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.subtract(other.ep));\n  }\n\n  multiply(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiply(scalar));\n  }\n\n  multiplyUnsafe(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiplyUnsafe(scalar));\n  }\n}\nexport const RistrettoPoint = /* @__PURE__ */ (() => {\n  if (!RistPoint.BASE) RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n  if (!RistPoint.ZERO) RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n  return RistPoint;\n})();\n\n// https://datatracker.ietf.org/doc/draft-irtf-cfrg-hash-to-curve/14/\n// Appendix B.  Hashing to ristretto255\nexport const hash_to_ristretto255 = (msg: Uint8Array, options: htfBasicOpts) => {\n  const d = options.DST;\n  const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n  const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n  const P = RistPoint.hashToCurve(uniform_bytes);\n  return P;\n};\n", "'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n", "var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n", "'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n", "var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n", "'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 \u2264 c \u2264 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 \u2264 c \u2264 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n\u22121, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n\u22121:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 \u2264 d \u2264 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // \u2212 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte \u2212 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte \u2212 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 \u00D7 utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte \u2212 0x80) << (6 \u00D7 (utf-8 bytes\n    // needed \u2212 utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 \u00D7 count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 \u00D7 (count \u2212 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n", "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n", null, "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n", "/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n", "import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n", "import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n", "import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n", "import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n", "import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n", "import { Struct, Refiner } from '../struct'\nimport { toFailures } from '../utils'\n\n/**\n * Ensure that a string, array, map, or set is empty.\n */\n\nexport function empty<\n  T extends string | any[] | Map<any, any> | Set<any>,\n  S extends any\n>(struct: Struct<T, S>): Struct<T, S> {\n  const expected = `Expected an empty ${struct.type}`\n\n  return refine(struct, 'empty', (value) => {\n    if (value instanceof Map || value instanceof Set) {\n      const { size } = value\n      return (\n        size === 0 || `${expected} but received one with a size of \\`${size}\\``\n      )\n    } else {\n      const { length } = value as string | any[]\n      return (\n        length === 0 ||\n        `${expected} but received one with a length of \\`${length}\\``\n      )\n    }\n  })\n}\n\n/**\n * Ensure that a number or date is below a threshold.\n */\n\nexport function max<T extends number | Date, S extends any>(\n  struct: Struct<T, S>,\n  threshold: T,\n  options: {\n    exclusive?: boolean\n  } = {}\n): Struct<T, S> {\n  const { exclusive } = options\n  return refine(struct, 'max', (value) => {\n    return exclusive\n      ? value < threshold\n      : value <= threshold ||\n          `Expected a ${struct.type} greater than ${\n            exclusive ? '' : 'or equal to '\n          }${threshold} but received \\`${value}\\``\n  })\n}\n\n/**\n * Ensure that a number or date is above a threshold.\n */\n\nexport function min<T extends number | Date, S extends any>(\n  struct: Struct<T, S>,\n  threshold: T,\n  options: {\n    exclusive?: boolean\n  } = {}\n): Struct<T, S> {\n  const { exclusive } = options\n  return refine(struct, 'min', (value) => {\n    return exclusive\n      ? value > threshold\n      : value >= threshold ||\n          `Expected a ${struct.type} greater than ${\n            exclusive ? '' : 'or equal to '\n          }${threshold} but received \\`${value}\\``\n  })\n}\n/**\n * Ensure that a string matches a regular expression.\n */\n\nexport function pattern<T extends string, S extends any>(\n  struct: Struct<T, S>,\n  regexp: RegExp\n): Struct<T, S> {\n  return refine(struct, 'pattern', (value) => {\n    return (\n      regexp.test(value) ||\n      `Expected a ${struct.type} matching \\`/${regexp.source}/\\` but received \"${value}\"`\n    )\n  })\n}\n\n/**\n * Ensure that a string, array, number, date, map, or set has a size (or length, or time) between `min` and `max`.\n */\n\nexport function size<\n  T extends string | number | Date | any[] | Map<any, any> | Set<any>,\n  S extends any\n>(struct: Struct<T, S>, min: number, max: number = min): Struct<T, S> {\n  const expected = `Expected a ${struct.type}`\n  const of = min === max ? `of \\`${min}\\`` : `between \\`${min}\\` and \\`${max}\\``\n\n  return refine(struct, 'size', (value) => {\n    if (typeof value === 'number' || value instanceof Date) {\n      return (\n        (min <= value && value <= max) ||\n        `${expected} ${of} but received \\`${value}\\``\n      )\n    } else if (value instanceof Map || value instanceof Set) {\n      const { size } = value\n      return (\n        (min <= size && size <= max) ||\n        `${expected} with a size ${of} but received one with a size of \\`${size}\\``\n      )\n    } else {\n      const { length } = value as string | any[]\n      return (\n        (min <= length && length <= max) ||\n        `${expected} with a length ${of} but received one with a length of \\`${length}\\``\n      )\n    }\n  })\n}\n\n/**\n * Augment a `Struct` to add an additional refinement to the validation.\n *\n * The refiner function is guaranteed to receive a value of the struct's type,\n * because the struct's existing validation will already have passed. This\n * allows you to layer additional validation on top of existing structs.\n */\n\nexport function refine<T, S>(\n  struct: Struct<T, S>,\n  name: string,\n  refiner: Refiner<T>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    *refiner(value, ctx) {\n      yield* struct.refiner(value, ctx)\n      const result = refiner(value, ctx)\n      const failures = toFailures(result, ctx, struct, value)\n\n      for (const failure of failures) {\n        yield { ...failure, refinement: name }\n      }\n    },\n  })\n}\n", "// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}", "export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;", "import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "import rng from './rng.js';\nimport stringify from './stringify.js'; // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\n\nvar _clockseq; // Previous uuid creation time\n\n\nvar _lastMSecs = 0;\nvar _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || new Array(16);\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    var seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || stringify(b);\n}\n\nexport default v1;", "import validate from './validate.js';\n\nfunction parse(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  var v;\n  var arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nexport default parse;", "import stringify from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  var bytes = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function (name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    var bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (var i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return stringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}", "/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  var output = [];\n  var length32 = input.length * 32;\n  var hexTab = '0123456789abcdef';\n\n  for (var i = 0; i < length32; i += 8) {\n    var x = input[i >> 5] >>> i % 32 & 0xff;\n    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n\n  for (var i = 0; i < x.length; i += 16) {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  var length8 = input.length * 8;\n  var output = new Uint32Array(getOutputLength(length8));\n\n  for (var i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  var lsw = (x & 0xffff) + (y & 0xffff);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nexport default md5;", "import v35 from './v35.js';\nimport md5 from './md5.js';\nvar v3 = v35('v3', 0x30, md5);\nexport default v3;", "import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;", "// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  var l = bytes.length / 4 + 2;\n  var N = Math.ceil(l / 16);\n  var M = new Array(N);\n\n  for (var _i = 0; _i < N; ++_i) {\n    var arr = new Uint32Array(16);\n\n    for (var j = 0; j < 16; ++j) {\n      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];\n    }\n\n    M[_i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (var _i2 = 0; _i2 < N; ++_i2) {\n    var W = new Uint32Array(80);\n\n    for (var t = 0; t < 16; ++t) {\n      W[t] = M[_i2][t];\n    }\n\n    for (var _t = 16; _t < 80; ++_t) {\n      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);\n    }\n\n    var a = H[0];\n    var b = H[1];\n    var c = H[2];\n    var d = H[3];\n    var e = H[4];\n\n    for (var _t2 = 0; _t2 < 80; ++_t2) {\n      var s = Math.floor(_t2 / 20);\n      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nexport default sha1;", "import v35 from './v35.js';\nimport sha1 from './sha1.js';\nvar v5 = v35('v5', 0x50, sha1);\nexport default v5;", "export default '00000000-0000-0000-0000-000000000000';", "import validate from './validate.js';\n\nfunction version(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.substr(14, 1), 16);\n}\n\nexport default version;", "export { default as v1 } from './v1.js';\nexport { default as v3 } from './v3.js';\nexport { default as v4 } from './v4.js';\nexport { default as v5 } from './v5.js';\nexport { default as NIL } from './nil.js';\nexport { default as version } from './version.js';\nexport { default as validate } from './validate.js';\nexport { default as stringify } from './stringify.js';\nexport { default as parse } from './parse.js';", "'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n", "'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n", "function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {\n    return exports;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  var exports = {},\n    Op = Object.prototype,\n    hasOwn = Op.hasOwnProperty,\n    defineProperty = Object.defineProperty || function (obj, key, desc) {\n      obj[key] = desc.value;\n    },\n    $Symbol = \"function\" == typeof Symbol ? Symbol : {},\n    iteratorSymbol = $Symbol.iterator || \"@@iterator\",\n    asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\",\n    toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n  function define(obj, key, value) {\n    return Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), obj[key];\n  }\n  try {\n    define({}, \"\");\n  } catch (err) {\n    define = function define(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,\n      generator = Object.create(protoGenerator.prototype),\n      context = new Context(tryLocsList || []);\n    return defineProperty(generator, \"_invoke\", {\n      value: makeInvokeMethod(innerFn, self, context)\n    }), generator;\n  }\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n  exports.wrap = wrap;\n  var ContinueSentinel = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf,\n    NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (\"throw\" !== record.type) {\n        var result = record.arg,\n          value = result.value;\n        return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) {\n          invoke(\"next\", value, resolve, reject);\n        }, function (err) {\n          invoke(\"throw\", err, resolve, reject);\n        }) : PromiseImpl.resolve(value).then(function (unwrapped) {\n          result.value = unwrapped, resolve(result);\n        }, function (error) {\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n      reject(record.arg);\n    }\n    var previousPromise;\n    defineProperty(this, \"_invoke\", {\n      value: function value(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new PromiseImpl(function (resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = \"suspendedStart\";\n    return function (method, arg) {\n      if (\"executing\" === state) throw new Error(\"Generator is already running\");\n      if (\"completed\" === state) {\n        if (\"throw\" === method) throw arg;\n        return doneResult();\n      }\n      for (context.method = method, context.arg = arg;;) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n        if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) {\n          if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\n          context.dispatchException(context.arg);\n        } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\n        state = \"executing\";\n        var record = tryCatch(innerFn, self, context);\n        if (\"normal\" === record.type) {\n          if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        }\n        \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method,\n      method = delegate.iterator[methodName];\n    if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel;\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\n    var info = record.arg;\n    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\n  }\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\n  }\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\", delete record.arg, entry.completion = record;\n  }\n  function Context(tryLocsList) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) return iteratorMethod.call(iterable);\n      if (\"function\" == typeof iterable.next) return iterable;\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n          next = function next() {\n            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\n            return next.value = undefined, next.done = !0, next;\n          };\n        return next.next = next;\n      }\n    }\n    return {\n      next: doneResult\n    };\n  }\n  function doneResult() {\n    return {\n      value: undefined,\n      done: !0\n    };\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), defineProperty(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) {\n    var ctor = \"function\" == typeof genFun && genFun.constructor;\n    return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\n  }, exports.mark = function (genFun) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun;\n  }, exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    void 0 === PromiseImpl && (PromiseImpl = Promise);\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () {\n    return this;\n  }), define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  }), exports.keys = function (val) {\n    var object = Object(val),\n      keys = [];\n    for (var key in object) keys.push(key);\n    return keys.reverse(), function next() {\n      for (; keys.length;) {\n        var key = keys.pop();\n        if (key in object) return next.value = key, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, exports.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var rootRecord = this.tryEntries[0].completion;\n      if (\"throw\" === rootRecord.type) throw rootRecord.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) throw exception;\n      var context = this;\n      function handle(loc, caught) {\n        return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\n      }\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i],\n          record = entry.completion;\n        if (\"root\" === entry.tryLoc) return handle(\"end\");\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\"),\n            hasFinally = hasOwn.call(entry, \"finallyLoc\");\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n          } else {\n            if (!hasFinally) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n      finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\n      var record = finallyEntry ? finallyEntry.completion : {};\n      return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (\"throw\" === record.type) throw record.arg;\n      return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (\"throw\" === record.type) {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      return this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\n    }\n  }, exports;\n}\nmodule.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "// TODO(Babel 8): Remove this file.\n\nvar runtime = require(\"../helpers/regeneratorRuntime\")();\nmodule.exports = runtime;\n\n// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n", "function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n", "/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_timer_id = undefined;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      clearTimeout(this.reconnect_timer_id);\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) _this4.reconnect_timer_id = setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;", "/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}", "import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n", "import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n", "import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n", "import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n", "import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n", "import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n", "/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n", "export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n", "import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n", "import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n", "export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n", "export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n", "import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n", "import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n", "import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n", "import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n", "import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      };\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n", "import {AccountKeysFromLookups} from '../message/account-keys';\nimport assert from '../utils/assert';\nimport {toBuffer} from '../utils/to-buffer';\nimport {Blockhash} from '../blockhash';\nimport {Message, MessageV0, VersionedMessage} from '../message';\nimport {PublicKey} from '../publickey';\nimport {AddressLookupTableAccount} from '../programs';\nimport {AccountMeta, TransactionInstruction} from './legacy';\n\nexport type TransactionMessageArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\nexport type DecompileArgs =\n  | {\n      accountKeysFromLookups: AccountKeysFromLookups;\n    }\n  | {\n      addressLookupTableAccounts: AddressLookupTableAccount[];\n    };\n\nexport class TransactionMessage {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n\n  constructor(args: TransactionMessageArgs) {\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(\n    message: VersionedMessage,\n    args?: DecompileArgs,\n  ): TransactionMessage {\n    const {header, compiledInstructions, recentBlockhash} = message;\n\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = header;\n\n    const numWritableSignedAccounts =\n      numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n\n    const numWritableUnsignedAccounts =\n      message.staticAccountKeys.length -\n      numRequiredSignatures -\n      numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error(\n        'Failed to decompile message because no account keys were found',\n      );\n    }\n\n    const instructions: TransactionInstruction[] = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys: AccountMeta[] = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(\n            `Failed to find key for account key index ${keyIndex}`,\n          );\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable =\n            keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable =\n            keyIndex - accountKeys.staticAccountKeys.length <\n            // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n            accountKeys.accountKeysFromLookups!.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable,\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(\n          `Failed to find program id for program id index ${compiledIx.programIdIndex}`,\n        );\n      }\n\n      instructions.push(\n        new TransactionInstruction({\n          programId,\n          data: toBuffer(compiledIx.data),\n          keys,\n        }),\n      );\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash,\n    });\n  }\n\n  compileToLegacyMessage(): Message {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n    });\n  }\n\n  compileToV0Message(\n    addressLookupTableAccounts?: AddressLookupTableAccount[],\n  ): MessageV0 {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts,\n    });\n  }\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n", "// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n", "import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n", "import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n", "// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n", "import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n", "import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n", "import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n", "import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n", "var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n", "const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n", "export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n", "export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n", "import RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport RpcWebSocketBrowserFactory from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport {\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n} from 'rpc-websockets/dist/lib/client/client.types';\n\nimport createRpc from './rpc-websocket-factory';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends RpcWebSocketCommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = (\n          rpc as ReturnType<typeof RpcWebSocketBrowserFactory>\n        ).socket;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<RpcWebSocketCommonClient['call']>\n  ): ReturnType<RpcWebSocketCommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<RpcWebSocketCommonClient['notify']>\n  ): ReturnType<RpcWebSocketCommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n", "const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n", "import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = this._buildArgs(accounts?.length ? [accounts] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n", "import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n", "import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n", "import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n", "import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n", "import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = process.env.TEST_LIVE ? 3762 : 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n", "import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n", "const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n", "import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n  DurableNonceTransactionConfirmationStrategy,\n  TransactionConfirmationStrategy,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: TransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | TransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy: TransactionConfirmationStrategy | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'nonceValue',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as DurableNonceTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n", "export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n", "import { _ as _classPrivateMethodInitSpec, a as _classPrivateMethodGet } from '../../../../dist/classPrivateMethodGet-ea199cc3.browser.esm.js';\nimport { _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet, b as _classPrivateFieldGet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport BloctoSDK from '@blocto/sdk';\nimport { utils, providers } from 'ethers';\nimport { w as walletIds } from '../../../../dist/walletIds-d49f47a5.browser.esm.js';\nimport { g as getValidPublicRPCUrl } from '../../../../dist/url-bc88b2b6.browser.esm.js';\nimport { W as WagmiConnector } from '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport { U as UserRejectedRequestError, a as ConnectorNotFoundError, S as SwitchChainError } from '../../../../dist/errors-d961f852.browser.esm.js';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-e4cc0175.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\nvar _provider = /*#__PURE__*/new WeakMap();\nvar _onAccountsChangedBind = /*#__PURE__*/new WeakMap();\nvar _onChainChangedBind = /*#__PURE__*/new WeakMap();\nvar _onDisconnectBind = /*#__PURE__*/new WeakMap();\nvar _isUserRejectedRequestError = /*#__PURE__*/new WeakSet();\nvar _handleConnectReset = /*#__PURE__*/new WeakSet();\nclass BloctoConnector extends WagmiConnector {\n  constructor(_ref) {\n    let {\n      chains,\n      options = {}\n    } = _ref;\n    super({\n      chains,\n      options\n    });\n    _classPrivateMethodInitSpec(this, _handleConnectReset);\n    _classPrivateMethodInitSpec(this, _isUserRejectedRequestError);\n    _defineProperty(this, \"id\", walletIds.blocto);\n    _defineProperty(this, \"name\", \"Blocto\");\n    _defineProperty(this, \"ready\", true);\n    _classPrivateFieldInitSpec(this, _provider, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _onAccountsChangedBind, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _onChainChangedBind, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _onDisconnectBind, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _onAccountsChangedBind, this.onAccountsChanged.bind(this));\n    _classPrivateFieldSet(this, _onChainChangedBind, this.onChainChanged.bind(this));\n    _classPrivateFieldSet(this, _onDisconnectBind, this.onDisconnect.bind(this));\n  }\n  async connect(config) {\n    try {\n      const provider = await this.getProvider(config);\n      this.setupListeners();\n      this.emit(\"message\", {\n        type: \"connecting\"\n      });\n      const accounts = await provider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const account = utils.getAddress(accounts[0]);\n      const id = await this.getChainId();\n      const unsupported = this.isChainUnsupported(id);\n      return {\n        account,\n        chain: {\n          id,\n          unsupported\n        },\n        provider\n      };\n    } catch (error) {\n      _classPrivateMethodGet(this, _handleConnectReset, _handleConnectReset2).call(this);\n      if (_classPrivateMethodGet(this, _isUserRejectedRequestError, _isUserRejectedRequestError2).call(this, error)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw error;\n    }\n  }\n  async disconnect() {\n    const provider = await this.getProvider();\n    await provider.request({\n      method: \"wallet_disconnect\"\n    });\n    this.removeListeners();\n    _classPrivateMethodGet(this, _handleConnectReset, _handleConnectReset2).call(this);\n  }\n  async getAccount() {\n    const provider = await this.getProvider();\n    const accounts = await provider.request({\n      method: \"eth_accounts\"\n    });\n    const [address] = accounts || [];\n    if (!address) {\n      throw new Error(\"No accounts found\");\n    }\n    return address;\n  }\n  async getChainId() {\n    const provider = await this.getProvider();\n    const chainId = await provider.request({\n      method: \"eth_chainId\"\n    });\n    return normalizeChainId(chainId);\n  }\n  getProvider() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!_classPrivateFieldGet(this, _provider)) {\n      const _chainId = chainId ?? this.options.chainId ?? this.chains[0].chainId;\n      const _rpc = this.chains.find(x => x.chainId === _chainId)?.rpc[0];\n      _classPrivateFieldSet(this, _provider, new BloctoSDK({\n        ethereum: {\n          chainId: _chainId,\n          rpc: _rpc\n        },\n        appId: this.options.appId\n      })?.ethereum);\n    }\n    if (!_classPrivateFieldGet(this, _provider)) {\n      throw new ConnectorNotFoundError();\n    }\n    return Promise.resolve(_classPrivateFieldGet(this, _provider));\n  }\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider(), this.getAccount()]);\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\n  }\n  async isAuthorized() {\n    return !!_classPrivateFieldGet(this, _provider)?._blocto?.sessionKey ?? false;\n  }\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    const id = utils.hexValue(chainId);\n    const chain = this.chains.find(x => x.chainId === chainId);\n    if (!chain) {\n      throw new SwitchChainError(new Error(\"chain not found on connector.\"));\n    }\n    const isBloctoSupportChain = provider._blocto.supportNetworkList[`${chainId}`];\n    if (!isBloctoSupportChain) {\n      throw new SwitchChainError(new Error(`Blocto unsupported chain: ${id}`));\n    }\n    try {\n      await provider.request({\n        method: \"wallet_addEthereumChain\",\n        params: [{\n          chainId: id,\n          rpcUrls: getValidPublicRPCUrl(chain) // no client id on purpose here\n        }]\n      });\n\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: id\n        }]\n      });\n      return chain;\n    } catch (error) {\n      if (_classPrivateMethodGet(this, _isUserRejectedRequestError, _isUserRejectedRequestError2).call(this, error)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw new SwitchChainError(error);\n    }\n  }\n  onAccountsChanged() {\n    // not supported yet\n  }\n  async onChainChanged(chain) {\n    const id = normalizeChainId(chain);\n    const unsupported = this.isChainUnsupported(id);\n    const account = await this.getAccount();\n    this.emit(\"change\", {\n      chain: {\n        id,\n        unsupported\n      },\n      account\n    });\n  }\n  onDisconnect() {\n    this.emit(\"disconnect\");\n  }\n  async setupListeners() {\n    const provider = await this.getProvider();\n    provider.on(\"accountsChanged\", _classPrivateFieldGet(this, _onAccountsChangedBind));\n    provider.on(\"chainChanged\", _classPrivateFieldGet(this, _onChainChangedBind));\n    provider.on(\"disconnect\", _classPrivateFieldGet(this, _onDisconnectBind));\n  }\n  async removeListeners() {\n    const provider = await this.getProvider();\n    provider.off(\"accountsChanged\", _classPrivateFieldGet(this, _onAccountsChangedBind));\n    provider.off(\"chainChanged\", _classPrivateFieldGet(this, _onChainChangedBind));\n    provider.off(\"disconnect\", _classPrivateFieldGet(this, _onDisconnectBind));\n  }\n}\nfunction _isUserRejectedRequestError2(error) {\n  return /(user rejected)/i.test(error.message);\n}\nfunction _handleConnectReset2() {\n  _classPrivateFieldSet(this, _provider, undefined);\n}\n\nexport { BloctoConnector };\n", "/* Version: 0.5.5 - August 14, 2023 10:23:52 */\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\n// instead invariant from package, since all error will throw on production\nfunction invariant(condition, format) {\n    if (!condition) {\n        throw new Error(format);\n    }\n}\n\n// local storage version naming rule: [milestone].[patch]\nvar KEY_SESSION;\n(function (KEY_SESSION) {\n    KEY_SESSION[\"prod\"] = \"BLOCTO_SDK\";\n    KEY_SESSION[\"dev\"] = \"BLOCTO_SDK_DEV\";\n    KEY_SESSION[\"staging\"] = \"BLOCTO_SDK_STAGING\";\n})(KEY_SESSION || (KEY_SESSION = {}));\nvar CHAIN;\n(function (CHAIN) {\n    CHAIN[\"ETHEREUM\"] = \"ethereum\";\n    CHAIN[\"SOLANA\"] = \"solana\";\n    CHAIN[\"APTOS\"] = \"aptos\";\n})(CHAIN || (CHAIN = {}));\n\nclass MemoryStorage {\n    constructor() {\n        this.storage = {};\n    }\n    getItem(key) {\n        return this[key] || null;\n    }\n    setItem(key, value) {\n        this.storage[key] = value;\n    }\n    removeItem(key) {\n        delete this.storage[key];\n    }\n}\nconst memoryStorage = typeof window !== 'undefined' ? window.memoryStorage : new MemoryStorage();\n\nconst isSupported = () => {\n    if (typeof window === 'undefined') {\n        return false;\n    }\n    try {\n        window.sessionStorage.setItem('local_storage_supported', '1');\n        const result = window.sessionStorage.getItem('local_storage_supported');\n        window.sessionStorage.removeItem('local_storage_supported');\n        return result === '1';\n    }\n    catch (error) {\n        return false;\n    }\n};\nconst storage = isSupported() ? window.sessionStorage : memoryStorage;\nconst getItem = (key, defaultValue = null) => {\n    const value = storage.getItem(key);\n    try {\n        return (value && JSON.parse(value)) || defaultValue;\n    }\n    catch (SyntaxError) {\n        return value || defaultValue;\n    }\n};\nconst setItem = (key, value) => storage.setItem(key, typeof value === 'string' ? value : JSON.stringify(value));\nconst removeItem = (key) => {\n    setItem(key, ''); // Due to some versions of browser bug can't removeItem correctly.\n    storage.removeItem(key);\n};\n/**\n * @param {keys.KEY_SESSION} key - key to retrieve the data\n * @returns {ProviderSession | null} ProviderSession | null\n * @description\n * Get ProviderSession from storage.\n * If the data is expired, will remove the data and return null\n */\nconst getAccountStorage = (key) => {\n    const rawAccountStorage = getItem(key, null);\n    if (!rawAccountStorage)\n        return null;\n    // compare the expiry time of the item with the current time\n    if (new Date().getTime() > rawAccountStorage.expiry ||\n        rawAccountStorage.v !== SDK_VERSION) {\n        removeItem(key);\n        return null;\n    }\n    return rawAccountStorage === null || rawAccountStorage === void 0 ? void 0 : rawAccountStorage.data;\n};\n/**\n  @param {keys.KEY_SESSION} key - key to store the data\n  @param {ProviderSession} data - Only the part of ProviderSession that needs to be updated\n  {\n    connected?: boolean;\n    code?: string | null;\n    accounts: Record<string, string[] | undefined>;\n  }\n  @param {number} expiry - expiry time of the data\n*/\nconst setAccountStorage = (key, data, expiry) => {\n    var _a, _b, _c;\n    const rawAccountStorage = getItem(key);\n    const newAccountStorage = {\n        data: {\n            code: (data === null || data === void 0 ? void 0 : data.code) || ((_a = rawAccountStorage === null || rawAccountStorage === void 0 ? void 0 : rawAccountStorage.data) === null || _a === void 0 ? void 0 : _a.code),\n            connected: !!((data === null || data === void 0 ? void 0 : data.code) || ((_b = rawAccountStorage === null || rawAccountStorage === void 0 ? void 0 : rawAccountStorage.data) === null || _b === void 0 ? void 0 : _b.code)),\n            accounts: Object.assign(Object.assign({}, (_c = rawAccountStorage === null || rawAccountStorage === void 0 ? void 0 : rawAccountStorage.data) === null || _c === void 0 ? void 0 : _c.accounts), data === null || data === void 0 ? void 0 : data.accounts),\n        },\n        expiry: expiry ||\n            (rawAccountStorage === null || rawAccountStorage === void 0 ? void 0 : rawAccountStorage.expiry) ||\n            new Date().getTime() + LOGIN_PERSISTING_TIME,\n        v: SDK_VERSION,\n    };\n    setItem(key, newAccountStorage);\n    return;\n};\nconst getChainAddress = (key, chain) => {\n    var _a, _b;\n    if (!((_a = getAccountStorage(key)) === null || _a === void 0 ? void 0 : _a.code)) {\n        removeItem(key);\n        return null;\n    }\n    return ((_b = getAccountStorage(key)) === null || _b === void 0 ? void 0 : _b.accounts[chain]) || null;\n};\nconst setChainAddress = (key, chain, account) => {\n    setAccountStorage(key, { accounts: { [chain]: account } });\n    return;\n};\nconst removeChainAddress = (key, chain) => {\n    setAccountStorage(key, { accounts: { [chain]: undefined } });\n    return;\n};\n\n/* eth series constants begin */\nconst ETH_RPC_LIST = {\n    // This is the list of public RPC endpoints that we known to be working\n    // Used to help developers did not set up their own RPC endpoints\n    // BSC mainnet\n    56: 'https://bsc-dataseed1.binance.org',\n    // BSC testnet\n    97: 'https://data-seed-prebsc-1-s1.binance.org:8545',\n    // Polygon Mainnet\n    137: 'https://rpc-mainnet.maticvigil.com/',\n    // Polygon Testnet\n    80001: 'https://rpc-mumbai.matic.today/',\n    // Avalanche Mainnet\n    43114: 'https://api.avax.network/ext/bc/C/rpc',\n    // Avalanche Fuji Testnet\n    43113: 'https://api.avax-test.network/ext/bc/C/rpc',\n    // Arbitrum Mainnet\n    42161: 'https://arb1.arbitrum.io/rpc',\n    // Arbitrum Testnet\n    421613: 'https://endpoints.omniatech.io/v1/arbitrum/goerli/public',\n    // Optimism Mainnet\n    10: 'https://mainnet.optimism.io',\n    // Optimism Goerli Testnet\n    420: 'https://goerli.optimism.io',\n};\nconst ETH_ENV_WALLET_SERVER_MAPPING = {\n    prod: 'https://wallet-v2.blocto.app',\n    staging: 'https://wallet-v2-staging.blocto.app',\n    dev: 'https://wallet-v2-dev.blocto.app',\n};\nconst ETH_SESSION_KEY_MAPPING = {\n    prod: KEY_SESSION.prod,\n    staging: KEY_SESSION.staging,\n    dev: KEY_SESSION.dev,\n};\n/* eth series constants end */\n/* sol constants begin */\nconst SOL_NET = {\n    MainnetBeta: 'mainnet-beta',\n    Testnet: 'testnet',\n    Devnet: 'devnet',\n};\nconst SOL_NET_SERVER_MAPPING = {\n    [SOL_NET.MainnetBeta]: 'https://wallet-v2.blocto.app',\n    [SOL_NET.Devnet]: 'https://wallet-v2-dev.blocto.app',\n    [SOL_NET.Testnet]: 'https://wallet-v2-dev.blocto.app',\n};\nconst SOL_SESSION_KEY_MAPPING = {\n    [SOL_NET.MainnetBeta]: KEY_SESSION.prod,\n    [SOL_NET.Devnet]: KEY_SESSION.dev,\n    [SOL_NET.Testnet]: KEY_SESSION.dev,\n};\n/* sol constants end */\n/* aptos constants begin */\nconst APT_SESSION_KEY_MAPPING = {\n    1: KEY_SESSION.prod,\n    2: KEY_SESSION.dev,\n    3: KEY_SESSION.dev,\n    4: KEY_SESSION.dev,\n    5: KEY_SESSION.staging,\n};\nconst APT_CHAIN_ID_SERVER_MAPPING = {\n    // MAINNET\n    1: 'https://wallet-v2.blocto.app',\n    // TESTNET\n    2: 'https://wallet-v2-dev.blocto.app',\n    // DEVNET\n    3: 'https://wallet-v2-dev.blocto.app',\n    // TESTING\n    4: 'https://wallet-v2-dev.blocto.app',\n    // PREMAINNET\n    5: 'https://wallet-v2-staging.blocto.app',\n};\nvar WalletAdapterNetwork;\n(function (WalletAdapterNetwork) {\n    WalletAdapterNetwork[\"Mainnet\"] = \"mainnet\";\n    WalletAdapterNetwork[\"Testnet\"] = \"testnet\";\n    WalletAdapterNetwork[\"Devnet\"] = \"devnet\";\n    WalletAdapterNetwork[\"Testing\"] = \"testing\";\n    WalletAdapterNetwork[\"Premainnet\"] = \"premainnet\";\n})(WalletAdapterNetwork || (WalletAdapterNetwork = {}));\nconst APT_CHAIN_ID_NAME_MAPPING = {\n    1: WalletAdapterNetwork.Mainnet,\n    2: WalletAdapterNetwork.Testnet,\n    3: WalletAdapterNetwork.Devnet,\n    4: WalletAdapterNetwork.Testing,\n    5: WalletAdapterNetwork.Premainnet,\n};\nconst APT_CHAIN_ID_RPC_MAPPING = {\n    1: 'https://fullnode.mainnet.aptoslabs.com/v1',\n    2: 'https://fullnode.testnet.aptoslabs.com/v1',\n    3: 'https://fullnode.devnet.aptoslabs.com/v1',\n    4: '',\n    5: 'https://premainnet.aptosdev.com/v1',\n};\n/* aptos constants end */\nconst EIP1193_EVENTS = [\n    'connect',\n    'disconnect',\n    'message',\n    'chainChanged',\n    'accountsChanged',\n];\n// Preserve login for 1 day\nconst LOGIN_PERSISTING_TIME = 86400 * 1000;\nconst DEFAULT_APP_ID = '00000000-0000-0000-0000-000000000000';\n// Will inject the version of the SDK by rollup versionInjector during build time\nconst SDK_VERSION = '0.5.5';\n\n// The root class for all providers\nclass BloctoProvider {\n    constructor() {\n        this.isBlocto = true;\n        this.isConnecting = false;\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this.eventListeners = {};\n        // alias removeListener\n        this.off = this.removeListener;\n        // init event listeners\n        EIP1193_EVENTS.forEach((event) => {\n            this.eventListeners[event] = [];\n        });\n        this.appId = DEFAULT_APP_ID;\n    }\n    // implement by children\n    // eslint-disable-next-line\n    request(payload) {\n        return __awaiter(this, void 0, void 0, function* () { });\n    }\n    on(event, listener) {\n        if (!EIP1193_EVENTS.includes(event))\n            return;\n        this.eventListeners[event].push(listener);\n    }\n    // @todo: implement it\n    // eslint-disable-next-line\n    once() { }\n    removeListener(event, listener) {\n        const listeners = this.eventListeners[event];\n        const index = listeners.findIndex((item) => item === listener);\n        if (index !== -1) {\n            this.eventListeners[event].splice(index, 1);\n        }\n    }\n}\n\nconst IFRAME_STYLE = 'width:100vw;height:100%;position:fixed;top:0;left:0;z-index:2147483646;border:none;box-sizing:border-box;color-scheme:light;inset:0px;display:block;pointer-events:auto;';\nfunction createFrame(url) {\n    const frame = document.createElement('iframe');\n    frame.setAttribute('src', url);\n    frame.setAttribute('style', IFRAME_STYLE);\n    return frame;\n}\nfunction attachFrame(frame) {\n    document.body.appendChild(frame);\n}\nfunction detatchFrame(frame) {\n    const parentNode = frame && frame.parentNode;\n    if (parentNode && parentNode.removeChild instanceof Function) {\n        parentNode.removeChild(frame);\n    }\n}\n\nvar addSelfRemovableHandler = (eventType, handler, target = window) => {\n    function listener(e) {\n        const removeEventListener = () => target.removeEventListener(eventType, listener);\n        handler(e, removeEventListener);\n    }\n    target.addEventListener(eventType, listener);\n};\n\nfunction responseSessionGuard(response, key, disconnectHandler) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (response.status === 403 || response.status === 401) {\n            if (disconnectHandler) {\n                disconnectHandler();\n            }\n            removeItem(key);\n        }\n        if (!response.ok) {\n            const data = yield response.json();\n            const e = new Error((data === null || data === void 0 ? void 0 : data.message) || 'unknown error');\n            e.error_code = data === null || data === void 0 ? void 0 : data.error_code;\n            throw e;\n        }\n        return response.json();\n    });\n}\n\nconst isEmail = (value) => /\\S+@\\S+\\.\\S+/.test(value);\nconst isValidTransaction = (transaction) => (typeof transaction === 'object' && transaction !== null && 'from' in transaction);\nconst isValidTransactions = (transactions) => (Array.isArray(transactions) && transactions.every(tx => isValidTransaction(tx)));\n\nfunction getEvmSupport() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { networks } = yield fetch('https://api.blocto.app/networks/evm').then((response) => response.json());\n        const evmSupportMap = networks.reduce((a, v) => (Object.assign(Object.assign({}, a), { [v.chain_id]: v })), {});\n        return evmSupportMap;\n    });\n}\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar dist = {};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _isNativeReflectConstruct$1() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct$1()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}\n\nvar classes = {};\n\nvar fastSafeStringify = stringify;\nstringify[\"default\"] = stringify;\nstringify.stable = deterministicStringify;\nstringify.stableStringify = deterministicStringify;\nvar LIMIT_REPLACE_NODE = '[...]';\nvar CIRCULAR_REPLACE_NODE = '[Circular]';\nvar arr = [];\nvar replacerStack = [];\nfunction defaultOptions() {\n  return {\n    depthLimit: Number.MAX_SAFE_INTEGER,\n    edgesLimit: Number.MAX_SAFE_INTEGER\n  };\n}\n\n// Regular stringify\nfunction stringify(obj, replacer, spacer, options) {\n  if (typeof options === 'undefined') {\n    options = defaultOptions();\n  }\n  decirc(obj, '', 0, [], undefined, 0, options);\n  var res;\n  try {\n    if (replacerStack.length === 0) {\n      res = JSON.stringify(obj, replacer, spacer);\n    } else {\n      res = JSON.stringify(obj, replaceGetterValues(replacer), spacer);\n    }\n  } catch (_) {\n    return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]');\n  } finally {\n    while (arr.length !== 0) {\n      var part = arr.pop();\n      if (part.length === 4) {\n        Object.defineProperty(part[0], part[1], part[3]);\n      } else {\n        part[0][part[1]] = part[2];\n      }\n    }\n  }\n  return res;\n}\nfunction setReplace(replace, val, k, parent) {\n  var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k);\n  if (propertyDescriptor.get !== undefined) {\n    if (propertyDescriptor.configurable) {\n      Object.defineProperty(parent, k, {\n        value: replace\n      });\n      arr.push([parent, k, val, propertyDescriptor]);\n    } else {\n      replacerStack.push([val, k, replace]);\n    }\n  } else {\n    parent[k] = replace;\n    arr.push([parent, k, val]);\n  }\n}\nfunction decirc(val, k, edgeIndex, stack, parent, depth, options) {\n  depth += 1;\n  var i;\n  if (_typeof(val) === 'object' && val !== null) {\n    for (i = 0; i < stack.length; i++) {\n      if (stack[i] === val) {\n        setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);\n        return;\n      }\n    }\n    if (typeof options.depthLimit !== 'undefined' && depth > options.depthLimit) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent);\n      return;\n    }\n    if (typeof options.edgesLimit !== 'undefined' && edgeIndex + 1 > options.edgesLimit) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent);\n      return;\n    }\n    stack.push(val);\n    // Optimize for Arrays. Big arrays could kill the performance otherwise!\n    if (Array.isArray(val)) {\n      for (i = 0; i < val.length; i++) {\n        decirc(val[i], i, i, stack, val, depth, options);\n      }\n    } else {\n      var keys = Object.keys(val);\n      for (i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        decirc(val[key], key, i, stack, val, depth, options);\n      }\n    }\n    stack.pop();\n  }\n}\n\n// Stable-stringify\nfunction compareFunction(a, b) {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n}\nfunction deterministicStringify(obj, replacer, spacer, options) {\n  if (typeof options === 'undefined') {\n    options = defaultOptions();\n  }\n  var tmp = deterministicDecirc(obj, '', 0, [], undefined, 0, options) || obj;\n  var res;\n  try {\n    if (replacerStack.length === 0) {\n      res = JSON.stringify(tmp, replacer, spacer);\n    } else {\n      res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer);\n    }\n  } catch (_) {\n    return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]');\n  } finally {\n    // Ensure that we restore the object as it was.\n    while (arr.length !== 0) {\n      var part = arr.pop();\n      if (part.length === 4) {\n        Object.defineProperty(part[0], part[1], part[3]);\n      } else {\n        part[0][part[1]] = part[2];\n      }\n    }\n  }\n  return res;\n}\nfunction deterministicDecirc(val, k, edgeIndex, stack, parent, depth, options) {\n  depth += 1;\n  var i;\n  if (_typeof(val) === 'object' && val !== null) {\n    for (i = 0; i < stack.length; i++) {\n      if (stack[i] === val) {\n        setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);\n        return;\n      }\n    }\n    try {\n      if (typeof val.toJSON === 'function') {\n        return;\n      }\n    } catch (_) {\n      return;\n    }\n    if (typeof options.depthLimit !== 'undefined' && depth > options.depthLimit) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent);\n      return;\n    }\n    if (typeof options.edgesLimit !== 'undefined' && edgeIndex + 1 > options.edgesLimit) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent);\n      return;\n    }\n    stack.push(val);\n    // Optimize for Arrays. Big arrays could kill the performance otherwise!\n    if (Array.isArray(val)) {\n      for (i = 0; i < val.length; i++) {\n        deterministicDecirc(val[i], i, i, stack, val, depth, options);\n      }\n    } else {\n      // Create a temporary object in the required way\n      var tmp = {};\n      var keys = Object.keys(val).sort(compareFunction);\n      for (i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        deterministicDecirc(val[key], key, i, stack, val, depth, options);\n        tmp[key] = val[key];\n      }\n      if (typeof parent !== 'undefined') {\n        arr.push([parent, k, val]);\n        parent[k] = tmp;\n      } else {\n        return tmp;\n      }\n    }\n    stack.pop();\n  }\n}\n\n// wraps replacer function to handle values we couldn't replace\n// and mark them as replaced value\nfunction replaceGetterValues(replacer) {\n  replacer = typeof replacer !== 'undefined' ? replacer : function (k, v) {\n    return v;\n  };\n  return function (key, val) {\n    if (replacerStack.length > 0) {\n      for (var i = 0; i < replacerStack.length; i++) {\n        var part = replacerStack[i];\n        if (part[1] === key && part[0] === val) {\n          val = part[2];\n          replacerStack.splice(i, 1);\n          break;\n        }\n      }\n    }\n    return replacer.call(this, key, val);\n  };\n}\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nObject.defineProperty(classes, \"__esModule\", {\n  value: true\n});\nclasses.EthereumProviderError = classes.EthereumRpcError = void 0;\nvar fast_safe_stringify_1 = fastSafeStringify;\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP-1474.\n * Permits any integer error code.\n */\nvar EthereumRpcError = /*#__PURE__*/function (_Error) {\n  _inherits(EthereumRpcError, _Error);\n  var _super = _createSuper(EthereumRpcError);\n  function EthereumRpcError(code, message, data) {\n    var _this;\n    _classCallCheck(this, EthereumRpcError);\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n    if (!message || typeof message !== 'string') {\n      throw new Error('\"message\" must be a nonempty string.');\n    }\n    _this = _super.call(this, message);\n    _this.code = code;\n    if (data !== undefined) {\n      _this.data = data;\n    }\n    return _this;\n  }\n  /**\n   * Returns a plain object with all public class properties.\n   */\n  _createClass(EthereumRpcError, [{\n    key: \"serialize\",\n    value: function serialize() {\n      var serialized = {\n        code: this.code,\n        message: this.message\n      };\n      if (this.data !== undefined) {\n        serialized.data = this.data;\n      }\n      if (this.stack) {\n        serialized.stack = this.stack;\n      }\n      return serialized;\n    }\n    /**\n     * Return a string representation of the serialized error, omitting\n     * any circular references.\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return fast_safe_stringify_1[\"default\"](this.serialize(), stringifyReplacer, 2);\n    }\n  }]);\n  return EthereumRpcError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nclasses.EthereumRpcError = EthereumRpcError;\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\nvar EthereumProviderError = /*#__PURE__*/function (_EthereumRpcError) {\n  _inherits(EthereumProviderError, _EthereumRpcError);\n  var _super2 = _createSuper(EthereumProviderError);\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   * `code` must be an integer in the 1000 <= 4999 range.\n   */\n  function EthereumProviderError(code, message, data) {\n    _classCallCheck(this, EthereumProviderError);\n    if (!isValidEthProviderCode(code)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n    return _super2.call(this, code, message, data);\n  }\n  return _createClass(EthereumProviderError);\n}(EthereumRpcError);\nclasses.EthereumProviderError = EthereumProviderError;\n// Internal\nfunction isValidEthProviderCode(code) {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}\nfunction stringifyReplacer(_, value) {\n  if (value === '[Circular]') {\n    return undefined;\n  }\n  return value;\n}\n\nvar utils = {};\n\nvar errorConstants = {};\n\nObject.defineProperty(errorConstants, \"__esModule\", {\n  value: true\n});\nerrorConstants.errorValues = errorConstants.errorCodes = void 0;\nerrorConstants.errorCodes = {\n  rpc: {\n    invalidInput: -32000,\n    resourceNotFound: -32001,\n    resourceUnavailable: -32002,\n    transactionRejected: -32003,\n    methodNotSupported: -32004,\n    limitExceeded: -32005,\n    parse: -32700,\n    invalidRequest: -32600,\n    methodNotFound: -32601,\n    invalidParams: -32602,\n    internal: -32603\n  },\n  provider: {\n    userRejectedRequest: 4001,\n    unauthorized: 4100,\n    unsupportedMethod: 4200,\n    disconnected: 4900,\n    chainDisconnected: 4901\n  }\n};\nerrorConstants.errorValues = {\n  '-32700': {\n    standard: 'JSON RPC 2.0',\n    message: 'Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.'\n  },\n  '-32600': {\n    standard: 'JSON RPC 2.0',\n    message: 'The JSON sent is not a valid Request object.'\n  },\n  '-32601': {\n    standard: 'JSON RPC 2.0',\n    message: 'The method does not exist / is not available.'\n  },\n  '-32602': {\n    standard: 'JSON RPC 2.0',\n    message: 'Invalid method parameter(s).'\n  },\n  '-32603': {\n    standard: 'JSON RPC 2.0',\n    message: 'Internal JSON-RPC error.'\n  },\n  '-32000': {\n    standard: 'EIP-1474',\n    message: 'Invalid input.'\n  },\n  '-32001': {\n    standard: 'EIP-1474',\n    message: 'Resource not found.'\n  },\n  '-32002': {\n    standard: 'EIP-1474',\n    message: 'Resource unavailable.'\n  },\n  '-32003': {\n    standard: 'EIP-1474',\n    message: 'Transaction rejected.'\n  },\n  '-32004': {\n    standard: 'EIP-1474',\n    message: 'Method not supported.'\n  },\n  '-32005': {\n    standard: 'EIP-1474',\n    message: 'Request limit exceeded.'\n  },\n  '4001': {\n    standard: 'EIP-1193',\n    message: 'User rejected the request.'\n  },\n  '4100': {\n    standard: 'EIP-1193',\n    message: 'The requested account and/or method has not been authorized by the user.'\n  },\n  '4200': {\n    standard: 'EIP-1193',\n    message: 'The requested method is not supported by this Ethereum provider.'\n  },\n  '4900': {\n    standard: 'EIP-1193',\n    message: 'The provider is disconnected from all chains.'\n  },\n  '4901': {\n    standard: 'EIP-1193',\n    message: 'The provider is disconnected from the specified chain.'\n  }\n};\n\n(function (exports) {\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.serializeError = exports.isValidCode = exports.getMessageFromCode = exports.JSON_RPC_SERVER_ERROR_MESSAGE = void 0;\n  var error_constants_1 = errorConstants;\n  var classes_1 = classes;\n  var FALLBACK_ERROR_CODE = error_constants_1.errorCodes.rpc.internal;\n  var FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.';\n  var FALLBACK_ERROR = {\n    code: FALLBACK_ERROR_CODE,\n    message: getMessageFromCode(FALLBACK_ERROR_CODE)\n  };\n  exports.JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.';\n  /**\n   * Gets the message for a given code, or a fallback message if the code has\n   * no corresponding message.\n   */\n  function getMessageFromCode(code) {\n    var fallbackMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FALLBACK_MESSAGE;\n    if (Number.isInteger(code)) {\n      var codeString = code.toString();\n      if (hasKey(error_constants_1.errorValues, codeString)) {\n        return error_constants_1.errorValues[codeString].message;\n      }\n      if (isJsonRpcServerError(code)) {\n        return exports.JSON_RPC_SERVER_ERROR_MESSAGE;\n      }\n    }\n    return fallbackMessage;\n  }\n  exports.getMessageFromCode = getMessageFromCode;\n  /**\n   * Returns whether the given code is valid.\n   * A code is only valid if it has a message.\n   */\n  function isValidCode(code) {\n    if (!Number.isInteger(code)) {\n      return false;\n    }\n    var codeString = code.toString();\n    if (error_constants_1.errorValues[codeString]) {\n      return true;\n    }\n    if (isJsonRpcServerError(code)) {\n      return true;\n    }\n    return false;\n  }\n  exports.isValidCode = isValidCode;\n  /**\n   * Serializes the given error to an Ethereum JSON RPC-compatible error object.\n   * Merely copies the given error's values if it is already compatible.\n   * If the given error is not fully compatible, it will be preserved on the\n   * returned object's data.originalError property.\n   */\n  function serializeError(error) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$fallbackError = _ref.fallbackError,\n      fallbackError = _ref$fallbackError === void 0 ? FALLBACK_ERROR : _ref$fallbackError,\n      _ref$shouldIncludeSta = _ref.shouldIncludeStack,\n      shouldIncludeStack = _ref$shouldIncludeSta === void 0 ? false : _ref$shouldIncludeSta;\n    var _a, _b;\n    if (!fallbackError || !Number.isInteger(fallbackError.code) || typeof fallbackError.message !== 'string') {\n      throw new Error('Must provide fallback error with integer number code and string message.');\n    }\n    if (error instanceof classes_1.EthereumRpcError) {\n      return error.serialize();\n    }\n    var serialized = {};\n    if (error && _typeof(error) === 'object' && !Array.isArray(error) && hasKey(error, 'code') && isValidCode(error.code)) {\n      var _error = error;\n      serialized.code = _error.code;\n      if (_error.message && typeof _error.message === 'string') {\n        serialized.message = _error.message;\n        if (hasKey(_error, 'data')) {\n          serialized.data = _error.data;\n        }\n      } else {\n        serialized.message = getMessageFromCode(serialized.code);\n        serialized.data = {\n          originalError: assignOriginalError(error)\n        };\n      }\n    } else {\n      serialized.code = fallbackError.code;\n      var message = (_a = error) === null || _a === void 0 ? void 0 : _a.message;\n      serialized.message = message && typeof message === 'string' ? message : fallbackError.message;\n      serialized.data = {\n        originalError: assignOriginalError(error)\n      };\n    }\n    var stack = (_b = error) === null || _b === void 0 ? void 0 : _b.stack;\n    if (shouldIncludeStack && error && stack && typeof stack === 'string') {\n      serialized.stack = stack;\n    }\n    return serialized;\n  }\n  exports.serializeError = serializeError;\n  // Internal\n  function isJsonRpcServerError(code) {\n    return code >= -32099 && code <= -32000;\n  }\n  function assignOriginalError(error) {\n    if (error && _typeof(error) === 'object' && !Array.isArray(error)) {\n      return Object.assign({}, error);\n    }\n    return error;\n  }\n  function hasKey(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n  }\n})(utils);\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nvar errors = {};\n\nObject.defineProperty(errors, \"__esModule\", {\n  value: true\n});\nerrors.ethErrors = void 0;\nvar classes_1 = classes;\nvar utils_1 = utils;\nvar error_constants_1 = errorConstants;\nerrors.ethErrors = {\n  rpc: {\n    /**\n     * Get a JSON RPC 2.0 Parse (-32700) error.\n     */\n    parse: function parse(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.parse, arg);\n    },\n    /**\n     * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n     */\n    invalidRequest: function invalidRequest(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidRequest, arg);\n    },\n    /**\n     * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n     */\n    invalidParams: function invalidParams(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidParams, arg);\n    },\n    /**\n     * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n     */\n    methodNotFound: function methodNotFound(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotFound, arg);\n    },\n    /**\n     * Get a JSON RPC 2.0 Internal (-32603) error.\n     */\n    internal: function internal(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.internal, arg);\n    },\n    /**\n     * Get a JSON RPC 2.0 Server error.\n     * Permits integer error codes in the [ -32099 <= -32005 ] range.\n     * Codes -32000 through -32004 are reserved by EIP-1474.\n     */\n    server: function server(opts) {\n      if (!opts || _typeof(opts) !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum RPC Server errors must provide single object argument.');\n      }\n      var code = opts.code;\n      if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n        throw new Error('\"code\" must be an integer such that: -32099 <= code <= -32005');\n      }\n      return getEthJsonRpcError(code, opts);\n    },\n    /**\n     * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n     */\n    invalidInput: function invalidInput(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidInput, arg);\n    },\n    /**\n     * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n     */\n    resourceNotFound: function resourceNotFound(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceNotFound, arg);\n    },\n    /**\n     * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n     */\n    resourceUnavailable: function resourceUnavailable(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceUnavailable, arg);\n    },\n    /**\n     * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n     */\n    transactionRejected: function transactionRejected(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.transactionRejected, arg);\n    },\n    /**\n     * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n     */\n    methodNotSupported: function methodNotSupported(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotSupported, arg);\n    },\n    /**\n     * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.\n     */\n    limitExceeded: function limitExceeded(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.limitExceeded, arg);\n    }\n  },\n  provider: {\n    /**\n     * Get an Ethereum Provider User Rejected Request (4001) error.\n     */\n    userRejectedRequest: function userRejectedRequest(arg) {\n      return getEthProviderError(error_constants_1.errorCodes.provider.userRejectedRequest, arg);\n    },\n    /**\n     * Get an Ethereum Provider Unauthorized (4100) error.\n     */\n    unauthorized: function unauthorized(arg) {\n      return getEthProviderError(error_constants_1.errorCodes.provider.unauthorized, arg);\n    },\n    /**\n     * Get an Ethereum Provider Unsupported Method (4200) error.\n     */\n    unsupportedMethod: function unsupportedMethod(arg) {\n      return getEthProviderError(error_constants_1.errorCodes.provider.unsupportedMethod, arg);\n    },\n    /**\n     * Get an Ethereum Provider Not Connected (4900) error.\n     */\n    disconnected: function disconnected(arg) {\n      return getEthProviderError(error_constants_1.errorCodes.provider.disconnected, arg);\n    },\n    /**\n     * Get an Ethereum Provider Chain Not Connected (4901) error.\n     */\n    chainDisconnected: function chainDisconnected(arg) {\n      return getEthProviderError(error_constants_1.errorCodes.provider.chainDisconnected, arg);\n    },\n    /**\n     * Get a custom Ethereum Provider error.\n     */\n    custom: function custom(opts) {\n      if (!opts || _typeof(opts) !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum Provider custom errors must provide single object argument.');\n      }\n      var code = opts.code,\n        message = opts.message,\n        data = opts.data;\n      if (!message || typeof message !== 'string') {\n        throw new Error('\"message\" must be a nonempty string');\n      }\n      return new classes_1.EthereumProviderError(code, message, data);\n    }\n  }\n};\n// Internal\nfunction getEthJsonRpcError(code, arg) {\n  var _parseOpts = parseOpts(arg),\n    _parseOpts2 = _slicedToArray(_parseOpts, 2),\n    message = _parseOpts2[0],\n    data = _parseOpts2[1];\n  return new classes_1.EthereumRpcError(code, message || utils_1.getMessageFromCode(code), data);\n}\nfunction getEthProviderError(code, arg) {\n  var _parseOpts3 = parseOpts(arg),\n    _parseOpts4 = _slicedToArray(_parseOpts3, 2),\n    message = _parseOpts4[0],\n    data = _parseOpts4[1];\n  return new classes_1.EthereumProviderError(code, message || utils_1.getMessageFromCode(code), data);\n}\nfunction parseOpts(arg) {\n  if (arg) {\n    if (typeof arg === 'string') {\n      return [arg];\n    } else if (_typeof(arg) === 'object' && !Array.isArray(arg)) {\n      var message = arg.message,\n        data = arg.data;\n      if (message && typeof message !== 'string') {\n        throw new Error('Must specify string message.');\n      }\n      return [message || undefined, data];\n    }\n  }\n  return [];\n}\n\n(function (exports) {\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getMessageFromCode = exports.serializeError = exports.EthereumProviderError = exports.EthereumRpcError = exports.ethErrors = exports.errorCodes = void 0;\n  var classes_1 = classes;\n  Object.defineProperty(exports, \"EthereumRpcError\", {\n    enumerable: true,\n    get: function get() {\n      return classes_1.EthereumRpcError;\n    }\n  });\n  Object.defineProperty(exports, \"EthereumProviderError\", {\n    enumerable: true,\n    get: function get() {\n      return classes_1.EthereumProviderError;\n    }\n  });\n  var utils_1 = utils;\n  Object.defineProperty(exports, \"serializeError\", {\n    enumerable: true,\n    get: function get() {\n      return utils_1.serializeError;\n    }\n  });\n  Object.defineProperty(exports, \"getMessageFromCode\", {\n    enumerable: true,\n    get: function get() {\n      return utils_1.getMessageFromCode;\n    }\n  });\n  var errors_1 = errors;\n  Object.defineProperty(exports, \"ethErrors\", {\n    enumerable: true,\n    get: function get() {\n      return errors_1.ethErrors;\n    }\n  });\n  var error_constants_1 = errorConstants;\n  Object.defineProperty(exports, \"errorCodes\", {\n    enumerable: true,\n    get: function get() {\n      return error_constants_1.errorCodes;\n    }\n  });\n})(dist);\n\nvar global$1 = (typeof global !== \"undefined\" ? global :\n  typeof self !== \"undefined\" ? self :\n  typeof window !== \"undefined\" ? window : {});\n\nvar lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\nvar inited = false;\nfunction init () {\n  inited = true;\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  for (var i = 0, len = code.length; i < len; ++i) {\n    lookup[i] = code[i];\n    revLookup[code.charCodeAt(i)] = i;\n  }\n\n  revLookup['-'.charCodeAt(0)] = 62;\n  revLookup['_'.charCodeAt(0)] = 63;\n}\n\nfunction toByteArray (b64) {\n  if (!inited) {\n    init();\n  }\n  var i, j, l, tmp, placeHolders, arr;\n  var len = b64.length;\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;\n\n  // base64 is 4/3 + up to two characters of the original data\n  arr = new Arr(len * 3 / 4 - placeHolders);\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len;\n\n  var L = 0;\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];\n    arr[L++] = (tmp >> 16) & 0xFF;\n    arr[L++] = (tmp >> 8) & 0xFF;\n    arr[L++] = tmp & 0xFF;\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);\n    arr[L++] = tmp & 0xFF;\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);\n    arr[L++] = (tmp >> 8) & 0xFF;\n    arr[L++] = tmp & 0xFF;\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp;\n  var output = [];\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);\n    output.push(tripletToBase64(tmp));\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  if (!inited) {\n    init();\n  }\n  var tmp;\n  var len = uint8.length;\n  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n  var output = '';\n  var parts = [];\n  var maxChunkLength = 16383; // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1];\n    output += lookup[tmp >> 2];\n    output += lookup[(tmp << 4) & 0x3F];\n    output += '==';\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);\n    output += lookup[tmp >> 10];\n    output += lookup[(tmp >> 4) & 0x3F];\n    output += lookup[(tmp << 2) & 0x3F];\n    output += '=';\n  }\n\n  parts.push(output);\n\n  return parts.join('')\n}\n\nfunction read (buffer, offset, isLE, mLen, nBytes) {\n  var e, m;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = -7;\n  var i = isLE ? (nBytes - 1) : 0;\n  var d = isLE ? -1 : 1;\n  var s = buffer[offset + i];\n\n  i += d;\n\n  e = s & ((1 << (-nBits)) - 1);\n  s >>= (-nBits);\n  nBits += eLen;\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1);\n  e >>= (-nBits);\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nfunction write (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);\n  var i = isLE ? 0 : (nBytes - 1);\n  var d = isLE ? 1 : -1;\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\n\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128;\n}\n\nvar toString = {}.toString;\n\nvar isArray = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\nvar INSPECT_MAX_BYTES = 50;\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined\n  ? global$1.TYPED_ARRAY_SUPPORT\n  : true;\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nkMaxLength();\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length);\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length);\n    }\n    that.length = length;\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192; // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype;\n  return arr\n};\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n};\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype;\n  Buffer.__proto__ = Uint8Array;\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) ;\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size);\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n};\n\nfunction allocUnsafe (that, size) {\n  assertSize(size);\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0;\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n};\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n};\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8';\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0;\n  that = createBuffer(that, length);\n\n  var actual = that.write(string, encoding);\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual);\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0;\n  that = createBuffer(that, length);\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255;\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength; // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array);\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset);\n  } else {\n    array = new Uint8Array(array, byteOffset, length);\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array;\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array);\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (internalIsBuffer(obj)) {\n    var len = checked(obj.length) | 0;\n    that = createBuffer(that, len);\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len);\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\nBuffer.isBuffer = isBuffer;\nfunction internalIsBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n};\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n};\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i;\n  if (length === undefined) {\n    length = 0;\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length;\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length);\n  var pos = 0;\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i];\n    if (!internalIsBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos);\n    pos += buf.length;\n  }\n  return buffer\n};\n\nfunction byteLength (string, encoding) {\n  if (internalIsBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string;\n  }\n\n  var len = string.length;\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false;\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\nBuffer.byteLength = byteLength;\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false;\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0;\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length;\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0;\n  start >>>= 0;\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8';\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true;\n\nfunction swap (b, n, m) {\n  var i = b[n];\n  b[n] = b[m];\n  b[m] = i;\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length;\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1);\n  }\n  return this\n};\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length;\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3);\n    swap(this, i + 1, i + 2);\n  }\n  return this\n};\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length;\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7);\n    swap(this, i + 1, i + 6);\n    swap(this, i + 2, i + 5);\n    swap(this, i + 3, i + 4);\n  }\n  return this\n};\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0;\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n};\n\nBuffer.prototype.equals = function equals (b) {\n  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n};\n\nBuffer.prototype.inspect = function inspect () {\n  var str = '';\n  var max = INSPECT_MAX_BYTES;\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');\n    if (this.length > max) str += ' ... ';\n  }\n  return '<Buffer ' + str + '>'\n};\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!internalIsBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0;\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0;\n  }\n  if (thisStart === undefined) {\n    thisStart = 0;\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length;\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0;\n  end >>>= 0;\n  thisStart >>>= 0;\n  thisEnd >>>= 0;\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart;\n  var y = end - start;\n  var len = Math.min(x, y);\n\n  var thisCopy = this.slice(thisStart, thisEnd);\n  var targetCopy = target.slice(start, end);\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i];\n      y = targetCopy[i];\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n};\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset;\n    byteOffset = 0;\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff;\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000;\n  }\n  byteOffset = +byteOffset;  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1);\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1;\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0;\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding);\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (internalIsBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF; // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1;\n  var arrLength = arr.length;\n  var valLength = val.length;\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase();\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2;\n      arrLength /= 2;\n      valLength /= 2;\n      byteOffset /= 2;\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i;\n  if (dir) {\n    var foundIndex = -1;\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i;\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex;\n        foundIndex = -1;\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true;\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false;\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n};\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n};\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n};\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0;\n  var remaining = buf.length - offset;\n  if (!length) {\n    length = remaining;\n  } else {\n    length = Number(length);\n    if (length > remaining) {\n      length = remaining;\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length;\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2;\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16);\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed;\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8';\n    length = this.length;\n    offset = 0;\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset;\n    length = this.length;\n    offset = 0;\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0;\n    if (isFinite(length)) {\n      length = length | 0;\n      if (encoding === undefined) encoding = 'utf8';\n    } else {\n      encoding = length;\n      length = undefined;\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset;\n  if (length === undefined || length > remaining) length = remaining;\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8';\n\n  var loweredCase = false;\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n};\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n};\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return fromByteArray(buf)\n  } else {\n    return fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end);\n  var res = [];\n\n  var i = start;\n  while (i < end) {\n    var firstByte = buf[i];\n    var codePoint = null;\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1;\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte;\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1];\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          fourthByte = buf[i + 3];\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint;\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD;\n      bytesPerSequence = 1;\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000;\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n      codePoint = 0xDC00 | codePoint & 0x3FF;\n    }\n\n    res.push(codePoint);\n    i += bytesPerSequence;\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000;\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length;\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = '';\n  var i = 0;\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    );\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F);\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i]);\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length;\n\n  if (!start || start < 0) start = 0;\n  if (!end || end < 0 || end > len) end = len;\n\n  var out = '';\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i]);\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end);\n  var res = '';\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length;\n  start = ~~start;\n  end = end === undefined ? len : ~~end;\n\n  if (start < 0) {\n    start += len;\n    if (start < 0) start = 0;\n  } else if (start > len) {\n    start = len;\n  }\n\n  if (end < 0) {\n    end += len;\n    if (end < 0) end = 0;\n  } else if (end > len) {\n    end = len;\n  }\n\n  if (end < start) end = start;\n\n  var newBuf;\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end);\n    newBuf.__proto__ = Buffer.prototype;\n  } else {\n    var sliceLen = end - start;\n    newBuf = new Buffer(sliceLen, undefined);\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start];\n    }\n  }\n\n  return newBuf\n};\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n\n  return val\n};\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length);\n  }\n\n  var val = this[offset + --byteLength];\n  var mul = 1;\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul;\n  }\n\n  return val\n};\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  return this[offset]\n};\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] | (this[offset + 1] << 8)\n};\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return (this[offset] << 8) | this[offset + 1]\n};\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n};\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n};\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n  mul *= 0x80;\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n  return val\n};\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n  var i = byteLength;\n  var mul = 1;\n  var val = this[offset + --i];\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul;\n  }\n  mul *= 0x80;\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n  return val\n};\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n};\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset] | (this[offset + 1] << 8);\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n};\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset + 1] | (this[offset] << 8);\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n};\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n};\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n};\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return read(this, offset, true, 23, 4)\n};\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return read(this, offset, false, 23, 4)\n};\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return read(this, offset, true, 52, 8)\n};\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return read(this, offset, false, 52, 8)\n};\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!internalIsBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var mul = 1;\n  var i = 0;\n  this[offset] = value & 0xFF;\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  this[offset + i] = value & 0xFF;\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  this[offset] = (value & 0xff);\n  return offset + 1\n};\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1;\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8;\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff);\n    this[offset + 1] = (value >>> 8);\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n  return offset + 2\n};\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8);\n    this[offset + 1] = (value & 0xff);\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n  return offset + 2\n};\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1;\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24);\n    this[offset + 2] = (value >>> 16);\n    this[offset + 1] = (value >>> 8);\n    this[offset] = (value & 0xff);\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n  return offset + 4\n};\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24);\n    this[offset + 1] = (value >>> 16);\n    this[offset + 2] = (value >>> 8);\n    this[offset + 3] = (value & 0xff);\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n  return offset + 4\n};\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = 0;\n  var mul = 1;\n  var sub = 0;\n  this[offset] = value & 0xFF;\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1;\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  var sub = 0;\n  this[offset + i] = value & 0xFF;\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1;\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  if (value < 0) value = 0xff + value + 1;\n  this[offset] = (value & 0xff);\n  return offset + 1\n};\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff);\n    this[offset + 1] = (value >>> 8);\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n  return offset + 2\n};\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8);\n    this[offset + 1] = (value & 0xff);\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n  return offset + 2\n};\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff);\n    this[offset + 1] = (value >>> 8);\n    this[offset + 2] = (value >>> 16);\n    this[offset + 3] = (value >>> 24);\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n  return offset + 4\n};\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (value < 0) value = 0xffffffff + value + 1;\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24);\n    this[offset + 1] = (value >>> 16);\n    this[offset + 2] = (value >>> 8);\n    this[offset + 3] = (value & 0xff);\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n  return offset + 4\n};\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4);\n  }\n  write(buf, value, offset, littleEndian, 23, 4);\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n};\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n};\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8);\n  }\n  write(buf, value, offset, littleEndian, 52, 8);\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n};\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n};\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0;\n  if (!end && end !== 0) end = this.length;\n  if (targetStart >= target.length) targetStart = target.length;\n  if (!targetStart) targetStart = 0;\n  if (end > 0 && end < start) end = start;\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length;\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start;\n  }\n\n  var len = end - start;\n  var i;\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    );\n  }\n\n  return len\n};\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start;\n      start = 0;\n      end = this.length;\n    } else if (typeof end === 'string') {\n      encoding = end;\n      end = this.length;\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0);\n      if (code < 256) {\n        val = code;\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255;\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0;\n  end = end === undefined ? this.length : end >>> 0;\n\n  if (!val) val = 0;\n\n  var i;\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val;\n    }\n  } else {\n    var bytes = internalIsBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString());\n    var len = bytes.length;\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len];\n    }\n  }\n\n  return this\n};\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g;\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '');\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '=';\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity;\n  var codePoint;\n  var length = string.length;\n  var leadSurrogate = null;\n  var bytes = [];\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i);\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint;\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n        leadSurrogate = codePoint;\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n    }\n\n    leadSurrogate = null;\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint);\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      );\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      );\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      );\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = [];\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF);\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo;\n  var byteArray = [];\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i);\n    hi = c >> 8;\n    lo = c % 256;\n    byteArray.push(lo);\n    byteArray.push(hi);\n  }\n\n  return byteArray\n}\n\n\nfunction base64ToBytes (str) {\n  return toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i];\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n\n// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nfunction isBuffer(obj) {\n  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))\n}\n\nfunction isFastBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))\n}\n\nconst isHexString = (hex) => typeof hex === 'string' && /^0x[0-9A-Fa-f]*$/.test(hex);\nconst utf8ToHex = (str) => {\n    return Buffer.from(str, 'utf8').toString('hex');\n};\n\nvar _EthereumProvider_instances, _EthereumProvider_getBloctoProperties, _EthereumProvider_addToSwitchable, _EthereumProvider_checkNetworkMatched;\nfunction parseChainId(chainId) {\n    if (!chainId) {\n        return 1;\n    }\n    if (typeof chainId === 'number') {\n        return chainId;\n    }\n    else if (chainId.startsWith('0x')) {\n        return parseInt(chainId, 16);\n    }\n    return parseInt(chainId, 10);\n}\nclass EthereumProvider extends BloctoProvider {\n    constructor({ chainId, rpc, walletServer, appId }) {\n        super();\n        _EthereumProvider_instances.add(this);\n        this.networkVersion = '1'; // same as chainId but in decimal\n        // setup chainId\n        invariant(chainId, \"'chainId' is required\");\n        this.networkVersion = `${parseChainId(chainId)}`;\n        this.chainId = `0x${parseChainId(chainId).toString(16)}`;\n        // setup rpc\n        this.rpc = rpc || ETH_RPC_LIST[this.networkVersion];\n        invariant(this.rpc, \"'rpc' is required\");\n        // setup injectedWalletServer\n        this.injectedWalletServer = walletServer;\n        // NOTE: _blocto is not fully initialized yet at this point\n        // Any function should call #getBloctoProperties() to get the full _blocto properties\n        this._blocto = {\n            sessionKey: KEY_SESSION.prod,\n            walletServer: this.injectedWalletServer || '',\n            blockchainName: '',\n            networkType: '',\n            supportNetworkList: {},\n            switchableNetwork: {},\n        };\n        this.appId = appId || DEFAULT_APP_ID;\n    }\n    // DEPRECATED API: see https://docs.metamask.io/guide/ethereum-provider.html#ethereum-send-deprecated\n    send(methodOrPayload, paramsOrCallback) {\n        return __awaiter(this, void 0, void 0, function* () {\n            switch (true) {\n                // signature type 1: arg1 - JSON-RPC payload, arg2 - callback;\n                // ethereum.send(payload: JsonRpcRequest, callback: JsonRpcCallback): void;\n                // This signature is exactly like ethereum.sendAsync()\n                case paramsOrCallback instanceof Function:\n                    return this.sendAsync(methodOrPayload, paramsOrCallback);\n                // signature type 2: arg1 - JSON-RPC method name, arg2 - params array;\n                // ethereum.send(method: string, params?: Array<unknown>): Promise<JsonRpcResponse>;\n                // This signature is like an async ethereum.sendAsync() with method and params as arguments,\n                // instead of a JSON-RPC payload and callback\n                case typeof methodOrPayload === 'string' &&\n                    Array.isArray(paramsOrCallback):\n                    return this.sendAsync({\n                        jsonrpc: '2.0',\n                        method: methodOrPayload,\n                        params: paramsOrCallback,\n                    });\n                // signature type 3: arg1 - JSON-RPC payload(should be synchronous methods)\n                // ethereum.send(payload: JsonRpcRequest): unknown;\n                // This signature enables you to call some type of RPC methods synchronously\n                default:\n                    return this.sendAsync(methodOrPayload);\n            }\n        });\n    }\n    // DEPRECATED API: see https://docs.metamask.io/guide/ethereum-provider.html#legacy-methods implementation\n    // web3 v1.x BatchRequest still depends on it so we need to implement anyway \u00AF\\_(\u30C4)_/\u00AF\n    sendAsync(payload, callback) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const handleRequest = new Promise((resolve) => {\n                // web3 v1.x concat batched JSON-RPC requests to an array, handle it here\n                if (Array.isArray(payload)) {\n                    // collect transactions and send batch with custom method\n                    const transactions = payload\n                        .filter((request) => request.method === 'eth_sendTransaction')\n                        .map((request) => { var _a; return (_a = request.params) === null || _a === void 0 ? void 0 : _a[0]; });\n                    const idBase = Math.floor(Math.random() * 10000);\n                    const batchedRequestPayload = {\n                        method: 'blocto_sendBatchTransaction',\n                        params: transactions,\n                    };\n                    const batchResponsePromise = this.request(batchedRequestPayload);\n                    const requests = payload.map(({ method, params }, index) => method === 'eth_sendTransaction'\n                        ? batchResponsePromise\n                        : this.request({\n                            id: idBase + index + 1,\n                            jsonrpc: '2.0',\n                            method,\n                            params,\n                        }));\n                    // resolve response when all request are executed\n                    Promise.allSettled(requests)\n                        .then((responses) => resolve(responses.map((response, index) => {\n                        return {\n                            id: String(idBase + index + 1),\n                            jsonrpc: '2.0',\n                            method: payload[index].method,\n                            result: response.status === 'fulfilled'\n                                ? response.value\n                                : undefined,\n                            error: response.status !== 'fulfilled'\n                                ? response.reason\n                                : undefined,\n                        };\n                    })))\n                        .catch((error) => {\n                        throw dist.ethErrors.rpc.internal(error === null || error === void 0 ? void 0 : error.message);\n                    });\n                }\n                else {\n                    this.request(Object.assign(Object.assign({}, payload), { id: Number(payload.id) })).then(resolve);\n                }\n            });\n            // execute callback or return promise, depdends on callback arg given or not\n            if (callback) {\n                handleRequest\n                    .then((data) => callback(null, data))\n                    .catch((error) => callback(error));\n            }\n            else {\n                return handleRequest;\n            }\n        });\n    }\n    /**\n     * Sending userOperation using Blocto SDK.\n     * @param {IUserOperation} userOp - userOperation object\n     * @remarks No need to include nonce, initCode, and signature as parameters when using BloctoSDK to send userOperation.\n     * These parameters will be ignored.\n     * @returns {Promise<string>} - userOperation hash\n     */\n    sendUserOperation(userOp) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request({\n                method: 'eth_sendUserOperation',\n                params: [userOp],\n            });\n        });\n    }\n    request(payload) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!(payload === null || payload === void 0 ? void 0 : payload.method))\n                throw dist.ethErrors.rpc.invalidRequest();\n            const existedSDK = window.ethereum;\n            if (existedSDK && existedSDK.isBlocto) {\n                if (payload.method === 'wallet_switchEthereumChain') {\n                    if (!((_b = (_a = payload === null || payload === void 0 ? void 0 : payload.params) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.chainId)) {\n                        throw dist.ethErrors.rpc.invalidParams();\n                    }\n                    return existedSDK.request(payload).then(() => {\n                        var _a, _b, _c;\n                        this.networkVersion = `${parseChainId((_a = payload === null || payload === void 0 ? void 0 : payload.params) === null || _a === void 0 ? void 0 : _a[0].chainId)}`;\n                        this.chainId = `0x${parseChainId((_b = payload === null || payload === void 0 ? void 0 : payload.params) === null || _b === void 0 ? void 0 : _b[0].chainId).toString(16)}`;\n                        this.rpc = (_c = switchableNetwork === null || switchableNetwork === void 0 ? void 0 : switchableNetwork[this.networkVersion]) === null || _c === void 0 ? void 0 : _c.rpc_url;\n                        return null;\n                    });\n                }\n                return existedSDK.request(payload);\n            }\n            const { blockchainName, switchableNetwork, sessionKey } = yield __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_getBloctoProperties).call(this);\n            // method that doesn't require user to be connected\n            switch (payload.method) {\n                case 'eth_chainId': {\n                    return this.chainId;\n                }\n                case 'net_version': {\n                    return this.networkVersion;\n                }\n                case 'wallet_addEthereumChain': {\n                    return this.loadSwitchableNetwork((payload === null || payload === void 0 ? void 0 : payload.params) || []);\n                }\n                case 'eth_call': {\n                    const response = yield this.handleReadRequests(payload);\n                    if (!response || (response && !response.result && response.error)) {\n                        const errorMessage = ((_c = response === null || response === void 0 ? void 0 : response.error) === null || _c === void 0 ? void 0 : _c.message)\n                            ? response.error.message\n                            : 'Request failed';\n                        throw dist.ethErrors.rpc.internal(errorMessage);\n                    }\n                    return response.result;\n                }\n                case 'wallet_switchEthereumChain': {\n                    if (!((_e = (_d = payload === null || payload === void 0 ? void 0 : payload.params) === null || _d === void 0 ? void 0 : _d[0]) === null || _e === void 0 ? void 0 : _e.chainId))\n                        throw dist.ethErrors.rpc.invalidParams();\n                    const newChainId = payload.params[0].chainId;\n                    if (!getChainAddress(sessionKey, blockchainName)) {\n                        // directly switch network if user is not connected\n                        // TODO: add a confirm switch network dialog\n                        const phasedChainId = parseChainId(newChainId);\n                        if (!switchableNetwork[phasedChainId]) {\n                            throw dist.ethErrors.provider.custom({\n                                code: 4902,\n                                message: `Unrecognized chain ID \"${newChainId}\". Try adding the chain using wallet_addEthereumChain first.`,\n                            });\n                        }\n                        this.networkVersion = `${phasedChainId}`;\n                        this.chainId = `0x${phasedChainId.toString(16)}`;\n                        this.rpc = switchableNetwork[phasedChainId].rpc_url;\n                        this.eventListeners.chainChanged.forEach((listener) => listener(this.chainId));\n                        return null;\n                    }\n                    break;\n                }\n            }\n            // Method that requires user to be connected\n            if (!getChainAddress(sessionKey, blockchainName)) {\n                const email = (_f = payload === null || payload === void 0 ? void 0 : payload.params) === null || _f === void 0 ? void 0 : _f[0];\n                if (payload.method === 'eth_requestAccounts' && isEmail(email)) {\n                    yield this.enable(email);\n                }\n                else {\n                    yield this.enable();\n                }\n            }\n            try {\n                let response = null;\n                let result = null;\n                switch (payload.method) {\n                    case 'eth_requestAccounts':\n                        yield this.fetchAccounts();\n                    // eslint-disable-next-line\n                    case 'eth_accounts':\n                        result = getChainAddress(sessionKey, blockchainName);\n                        break;\n                    case 'eth_coinbase': {\n                        result = (_g = getChainAddress(sessionKey, blockchainName)) === null || _g === void 0 ? void 0 : _g[0];\n                        break;\n                    }\n                    case 'eth_signTypedData_v3':\n                    case 'eth_signTypedData':\n                    case 'eth_signTypedData_v4':\n                    case 'personal_sign':\n                    case 'eth_sign': {\n                        result = yield this.handleSign(payload);\n                        break;\n                    }\n                    case 'wallet_disconnect': {\n                        this.handleDisconnect();\n                        result = null;\n                        break;\n                    }\n                    case 'eth_sendTransaction':\n                        result = yield this.handleSendTransaction(payload);\n                        break;\n                    case 'blocto_sendBatchTransaction':\n                        result = yield this.handleSendBatchTransaction(payload);\n                        break;\n                    case 'eth_signTransaction':\n                    case 'eth_sendRawTransaction': {\n                        throw dist.ethErrors.rpc.methodNotSupported('Method Not Supported: ' + payload.method);\n                    }\n                    case 'eth_sendUserOperation':\n                        result = yield this.handleSendUserOperation(payload);\n                        break;\n                    case 'wallet_switchEthereumChain': {\n                        if (!((_j = (_h = payload === null || payload === void 0 ? void 0 : payload.params) === null || _h === void 0 ? void 0 : _h[0]) === null || _j === void 0 ? void 0 : _j.chainId)) {\n                            throw dist.ethErrors.rpc.invalidParams();\n                        }\n                        const oldAccount = (_k = getChainAddress(sessionKey, blockchainName)) === null || _k === void 0 ? void 0 : _k[0];\n                        const oldChainId = this.chainId;\n                        const newChainId = payload.params[0].chainId;\n                        if (!switchableNetwork[parseChainId(newChainId)]) {\n                            throw dist.ethErrors.provider.custom({\n                                code: 4902,\n                                message: `Unrecognized chain ID \"${parseChainId(payload.params[0].chainId)}\". Try adding the chain using wallet_addEthereumChain first.`,\n                            });\n                        }\n                        this.networkVersion = `${parseChainId(newChainId)}`;\n                        this.chainId = `0x${parseChainId(newChainId).toString(16)}`;\n                        this.rpc = switchableNetwork[this.networkVersion].rpc_url;\n                        yield this.enable()\n                            .then(([newAccount]) => {\n                            var _a;\n                            if (newAccount !== oldAccount) {\n                                (_a = this.eventListeners) === null || _a === void 0 ? void 0 : _a.accountsChanged.forEach((listener) => listener([newAccount]));\n                            }\n                            this.eventListeners.chainChanged.forEach((listener) => listener(this.chainId));\n                            result = null;\n                        })\n                            .catch((error) => {\n                            this.networkVersion = `${parseChainId(oldChainId)}`;\n                            this.chainId = `0x${parseChainId(oldChainId).toString(16)}`;\n                            this.rpc = switchableNetwork[this.networkVersion].rpc_url;\n                            throw error;\n                        });\n                        break;\n                    }\n                    case 'eth_estimateUserOperationGas':\n                    case 'eth_getUserOperationByHash':\n                    case 'eth_getUserOperationReceipt':\n                    case 'eth_supportedEntryPoints':\n                        result = yield this.handleBundler(payload);\n                        break;\n                    default:\n                        response = yield this.handleReadRequests(payload);\n                }\n                if (response && !response.result && response.error) {\n                    const errorMessage = response.error.message\n                        ? response.error.message\n                        : 'Request failed';\n                    throw dist.ethErrors.rpc.internal(errorMessage);\n                }\n                if (response)\n                    return response.result;\n                return result;\n            }\n            catch (error) {\n                throw dist.ethErrors.rpc.internal(error === null || error === void 0 ? void 0 : error.message);\n            }\n        });\n    }\n    bloctoApi(url, options) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { walletServer, blockchainName, sessionKey } = yield __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_getBloctoProperties).call(this);\n            const sessionId = ((_a = getAccountStorage(sessionKey)) === null || _a === void 0 ? void 0 : _a.code) || '';\n            if (!sessionId) {\n                throw dist.ethErrors.provider.unauthorized();\n            }\n            return fetch(`${walletServer}/api/${blockchainName}${url}`, Object.assign({ headers: {\n                    'Content-Type': 'application/json',\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    'Blocto-Application-Identifier': this.appId,\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    'Blocto-Session-Identifier': sessionId,\n                } }, options))\n                .then((response) => responseSessionGuard(response, sessionKey, () => {\n                var _a;\n                (_a = this.eventListeners) === null || _a === void 0 ? void 0 : _a.disconnect.forEach((listener) => listener(dist.ethErrors.provider.disconnected()));\n            }))\n                .catch((e) => {\n                if ((e === null || e === void 0 ? void 0 : e.error_code) === 'unsupported_method') {\n                    throw dist.ethErrors.rpc.methodNotSupported('Method Not Supported: ' + e.message);\n                }\n                else {\n                    throw dist.ethErrors.rpc.server({\n                        code: -32005,\n                        message: `Blocto server error: ${e.message}`,\n                    });\n                }\n            });\n        });\n    }\n    responseListener(frame, objectKey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { walletServer } = yield __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_getBloctoProperties).call(this);\n            return new Promise((resolve, reject) => addSelfRemovableHandler('message', (event, removeEventListener) => {\n                const e = event;\n                if (e.origin === walletServer &&\n                    e.data.type === 'ETH:FRAME:RESPONSE') {\n                    if (e.data.status === 'APPROVED') {\n                        removeEventListener();\n                        detatchFrame(frame);\n                        resolve(e.data[objectKey]);\n                    }\n                    if (e.data.status === 'DECLINED') {\n                        removeEventListener();\n                        detatchFrame(frame);\n                        if (e.data.errorCode === 'incorrect_session_id') {\n                            this.handleDisconnect();\n                        }\n                        reject(dist.ethErrors.provider.userRejectedRequest(e.data.errorMessage));\n                    }\n                }\n                if (e.data.type === 'ETH:FRAME:CLOSE') {\n                    removeEventListener();\n                    detatchFrame(frame);\n                    reject(dist.ethErrors.provider.userRejectedRequest('User declined the request'));\n                }\n            }));\n        });\n    }\n    setIframe(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof window === 'undefined') {\n                throw dist.ethErrors.provider.custom({\n                    code: 1001,\n                    message: 'Blocto SDK only works in browser environment',\n                });\n            }\n            const { walletServer, blockchainName } = yield __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_getBloctoProperties).call(this);\n            const frame = createFrame(`${walletServer}/${this.appId}/${blockchainName}${url}`);\n            attachFrame(frame);\n            return frame;\n        });\n    }\n    // eip-1102 alias\n    // DEPRECATED API: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1102.md\n    enable(email) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { walletServer, blockchainName, sessionKey } = yield __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_getBloctoProperties).call(this);\n            const existedSDK = window.ethereum;\n            if (existedSDK && existedSDK.isBlocto) {\n                if (existedSDK.chainId !== this.chainId) {\n                    yield existedSDK.request({\n                        method: 'wallet_addEthereumChain',\n                        params: [{ chainId: this.chainId }],\n                    });\n                    yield existedSDK.request({\n                        method: 'wallet_switchEthereumChain',\n                        params: [{ chainId: this.chainId }],\n                    });\n                    setChainAddress(sessionKey, blockchainName, [existedSDK.address]);\n                }\n                return new Promise((resolve, reject) => \n                // add a small delay to make sure the network has been switched\n                setTimeout(() => existedSDK.enable().then(resolve).catch(reject), 10));\n            }\n            const address = getChainAddress(sessionKey, blockchainName);\n            if (address) {\n                return new Promise((resolve) => {\n                    resolve(address);\n                });\n            }\n            const params = new URLSearchParams();\n            params.set('l6n', window.location.origin);\n            params.set('v', SDK_VERSION);\n            const emailParam = email && isEmail(email) ? `/${email}` : '';\n            const loginFrame = yield this.setIframe(`/authn${emailParam}?${params.toString()}`);\n            return new Promise((resolve, reject) => {\n                addSelfRemovableHandler('message', (event, removeListener) => {\n                    var _a;\n                    const e = event;\n                    if (e.origin === walletServer) {\n                        if (e.data.type === 'ETH:FRAME:RESPONSE') {\n                            removeListener();\n                            detatchFrame(loginFrame);\n                            (_a = this.eventListeners) === null || _a === void 0 ? void 0 : _a.connect.forEach((listener) => listener({ chainId: this.chainId }));\n                            setAccountStorage(sessionKey, {\n                                code: e.data.code,\n                                connected: true,\n                                accounts: {\n                                    [blockchainName]: [e.data.addr],\n                                },\n                            }, e.data.exp);\n                            resolve([e.data.addr]);\n                        }\n                        if (e.data.type === 'ETH:FRAME:CLOSE') {\n                            removeListener();\n                            detatchFrame(loginFrame);\n                            reject(dist.ethErrors.provider.userRejectedRequest());\n                        }\n                    }\n                });\n            });\n        });\n    }\n    fetchAccounts() {\n        return __awaiter(this, void 0, void 0, function* () {\n            __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_checkNetworkMatched).call(this);\n            const { blockchainName, sessionKey } = yield __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_getBloctoProperties).call(this);\n            const { accounts } = yield this.bloctoApi(`/accounts`);\n            setChainAddress(sessionKey, blockchainName, accounts);\n            return accounts;\n        });\n    }\n    handleReadRequests(payload) {\n        return __awaiter(this, void 0, void 0, function* () {\n            __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_checkNetworkMatched).call(this);\n            return fetch(this.rpc, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(Object.assign({ id: 1, jsonrpc: '2.0' }, payload)),\n            })\n                .then((response) => response.json())\n                .catch((e) => {\n                throw dist.ethErrors.rpc.internal(e);\n            });\n        });\n    }\n    handleSign({ method, params }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let message = '';\n            if (Array.isArray(params)) {\n                if (method === 'eth_sign') {\n                    message = isHexString(params[1])\n                        ? params[1].slice(2)\n                        : utf8ToHex(params[1]);\n                }\n                else if (method === 'personal_sign') {\n                    message = isHexString(params[0])\n                        ? params[0].slice(2)\n                        : utf8ToHex(params[0]);\n                }\n                else if ([\n                    'eth_signTypedData',\n                    'eth_signTypedData_v3',\n                    'eth_signTypedData_v4',\n                ].includes(method)) {\n                    message = params[1];\n                    const { domain } = JSON.parse(message);\n                    if (isHexString(domain.chainId)) {\n                        throw dist.ethErrors.rpc.invalidParams(`Provided chainId \"${domain.chainId}\" must be a number`);\n                    }\n                    if (parseChainId(domain.chainId) !== parseChainId(this.chainId)) {\n                        throw dist.ethErrors.rpc.invalidParams(`Provided chainId \"${domain.chainId}\" must match the active chainId \"${parseChainId(this.chainId)}\"`);\n                    }\n                }\n            }\n            __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_checkNetworkMatched).call(this);\n            const { signatureId } = yield this.bloctoApi(`/user-signature`, { method: 'POST', body: JSON.stringify({ method, message }) });\n            const signFrame = yield this.setIframe(`/user-signature/${signatureId}`);\n            return this.responseListener(signFrame, 'signature');\n        });\n    }\n    handleSendTransaction(payload) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_checkNetworkMatched).call(this);\n            if (!isValidTransaction((_a = payload.params) === null || _a === void 0 ? void 0 : _a[0])) {\n                throw dist.ethErrors.rpc.invalidParams();\n            }\n            const { authorizationId } = yield this.bloctoApi(`/authz`, { method: 'POST', body: JSON.stringify(payload.params) });\n            const authzFrame = yield this.setIframe(`/authz/${authorizationId}`);\n            return this.responseListener(authzFrame, 'txHash');\n        });\n    }\n    handleSendBatchTransaction(payload) {\n        return __awaiter(this, void 0, void 0, function* () {\n            __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_checkNetworkMatched).call(this);\n            const extractParams = (params) => params.map((param) => 'params' in param\n                ? param.params[0] // handle passing web3.eth.sendTransaction.request(...) as a parameter with params\n                : param);\n            const formatParams = extractParams(payload.params);\n            const copyPayload = Object.assign(Object.assign({}, payload), { params: formatParams });\n            if (!isValidTransactions(copyPayload.params)) {\n                throw dist.ethErrors.rpc.invalidParams();\n            }\n            return this.handleSendTransaction(copyPayload);\n        });\n    }\n    handleSendUserOperation(payload) {\n        return __awaiter(this, void 0, void 0, function* () {\n            __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_checkNetworkMatched).call(this);\n            const { authorizationId } = yield this.bloctoApi(`/user-operation`, {\n                method: 'POST',\n                body: JSON.stringify(payload.params),\n            });\n            const userOPFrame = yield this.setIframe(`/user-operation/${authorizationId}`);\n            return this.responseListener(userOPFrame, 'userOpHash');\n        });\n    }\n    handleBundler(payload) {\n        return __awaiter(this, void 0, void 0, function* () {\n            __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_checkNetworkMatched).call(this);\n            return this.bloctoApi(`/rpc/bundler`, {\n                method: 'POST',\n                body: JSON.stringify(Object.assign({ id: 1, jsonrpc: '2.0' }, payload)),\n            });\n        });\n    }\n    handleDisconnect() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const existedSDK = window.ethereum;\n            if (existedSDK && existedSDK.isBlocto) {\n                return existedSDK.disconnect();\n            }\n            const { sessionKey, blockchainName } = yield __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_getBloctoProperties).call(this);\n            removeChainAddress(sessionKey, blockchainName);\n            (_a = this.eventListeners) === null || _a === void 0 ? void 0 : _a.disconnect.forEach((listener) => listener(dist.ethErrors.provider.disconnected()));\n        });\n    }\n    loadSwitchableNetwork(networkList) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // setup switchable list if user set networkList\n            if (networkList === null || networkList === void 0 ? void 0 : networkList.length) {\n                const listToAdd = networkList.map(({ chainId, rpcUrls }) => {\n                    if (!chainId)\n                        throw dist.ethErrors.rpc.invalidParams('Empty chainId');\n                    if (!(rpcUrls === null || rpcUrls === void 0 ? void 0 : rpcUrls.length))\n                        throw dist.ethErrors.rpc.invalidParams('Empty rpcUrls');\n                    return __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_addToSwitchable).call(this, {\n                        chainId: `${parseChainId(chainId)}`,\n                        rpcUrls,\n                    });\n                });\n                return Promise.all(listToAdd).then(() => null);\n            }\n            else {\n                throw dist.ethErrors.rpc.invalidParams('Empty networkList');\n            }\n        });\n    }\n}\n_EthereumProvider_instances = new WeakSet(), _EthereumProvider_getBloctoProperties = function _EthereumProvider_getBloctoProperties() {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!Object.keys(this._blocto.supportNetworkList).length) {\n            yield getEvmSupport()\n                .then((result) => (this._blocto.supportNetworkList = result))\n                .catch((e) => {\n                throw dist.ethErrors.provider.custom({\n                    code: 1001,\n                    message: `Get blocto server failed: ${e.message}`,\n                });\n            });\n        }\n        const { chain_id, name, network_type, blocto_service_environment, display_name, } = this._blocto.supportNetworkList[this.networkVersion];\n        if (!chain_id)\n            throw dist.ethErrors.provider.unsupportedMethod(`Get support chain failed: ${this.networkVersion} might not be supported yet.`);\n        this._blocto = Object.assign(Object.assign({}, this._blocto), { sessionKey: ETH_SESSION_KEY_MAPPING[blocto_service_environment], walletServer: this.injectedWalletServer ||\n                ETH_ENV_WALLET_SERVER_MAPPING[blocto_service_environment], blockchainName: name, networkType: network_type, switchableNetwork: Object.assign(Object.assign({}, this._blocto.switchableNetwork), { [chain_id]: {\n                    name,\n                    display_name,\n                    network_type,\n                    wallet_web_url: this._blocto.walletServer,\n                    rpc_url: this.rpc,\n                } }) });\n        return this._blocto;\n    });\n}, _EthereumProvider_addToSwitchable = function _EthereumProvider_addToSwitchable({ chainId, rpcUrls, }) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { supportNetworkList } = yield __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_getBloctoProperties).call(this);\n        const { chain_id, name, display_name, network_type, blocto_service_environment, } = supportNetworkList[chainId];\n        const wallet_web_url = ETH_ENV_WALLET_SERVER_MAPPING[blocto_service_environment];\n        this._blocto.switchableNetwork[chain_id] = {\n            name,\n            display_name,\n            network_type,\n            wallet_web_url,\n            rpc_url: rpcUrls[0],\n        };\n    });\n}, _EthereumProvider_checkNetworkMatched = function _EthereumProvider_checkNetworkMatched() {\n    const existedSDK = window.ethereum;\n    if (existedSDK &&\n        existedSDK.isBlocto &&\n        parseChainId(existedSDK.chainId) !== parseChainId(this.chainId)) {\n        throw dist.ethErrors.provider.chainDisconnected();\n    }\n};\n\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nconst basex = src;\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n\nvar bs58 = basex(ALPHABET);\n\nvar bs58$1 = /*@__PURE__*/getDefaultExportFromCjs(bs58);\n\nlet Solana;\ntry {\n    Solana = require('@solana/web3.js');\n}\ncatch (_a) {\n    // prevent crash if there is no @solana/web3.js.\n}\nclass SolanaProvider extends BloctoProvider {\n    constructor({ net = 'mainnet-beta', server, appId, rpc, }) {\n        super();\n        invariant(net, \"'net' is required\");\n        invariant(Object.values(SOL_NET).includes(net), 'unsupported net');\n        this.net = net;\n        this.rpc =\n            rpc ||\n                (net === 'mainnet-beta'\n                    ? 'https://free.rpcpool.com'\n                    : `https://api.${net}.solana.com`);\n        this.server = server || SOL_NET_SERVER_MAPPING[this.net] || '';\n        this.appId = appId || DEFAULT_APP_ID;\n        this.sessionKey = SOL_SESSION_KEY_MAPPING[this.net];\n        if (!Solana) {\n            throw new Error('No @solana/web3.js installed. Please install it to interact with Solana.');\n        }\n    }\n    request(payload) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const existedSDK = window.solana;\n            if (existedSDK && existedSDK.isBlocto) {\n                return existedSDK.request(payload);\n            }\n            if (!getChainAddress(this.sessionKey, CHAIN.SOLANA)) {\n                yield this.connect();\n            }\n            try {\n                let response = null;\n                let result = null;\n                switch (payload.method) {\n                    case 'connect':\n                        result = yield this.fetchAccounts();\n                        break;\n                    case 'disconnect':\n                        this.disconnect();\n                        break;\n                    case 'getAccounts':\n                        result = ((_a = getChainAddress(this.sessionKey, CHAIN.SOLANA)) === null || _a === void 0 ? void 0 : _a.length)\n                            ? getChainAddress(this.sessionKey, CHAIN.SOLANA)\n                            : yield this.fetchAccounts();\n                        break;\n                    case 'getAccountInfo': {\n                        // Format the data as the same format returning from Connection.getAccountInfo from @solana/web3.js\n                        // ref: https://solana-labs.github.io/solana-web3.js/classes/Connection.html#getAccountInfo\n                        const accountInfo = yield this.handleReadRequests(payload);\n                        const [bufferData, encoding] = accountInfo.result.value.data;\n                        result = Object.assign(Object.assign({}, accountInfo.result.value), { data: Buffer.from(bufferData, encoding), owner: new Solana.PublicKey(accountInfo.result.value.owner) });\n                        break;\n                    }\n                    // custom JSON-RPC method\n                    case 'convertToProgramWalletTransaction':\n                        result = yield this.handleConvertTransaction(payload);\n                        break;\n                    // custom JSON-RPC method\n                    case 'signAndSendTransaction':\n                        result = yield this.handleSignAndSendTransaction(payload);\n                        break;\n                    // block user from using traditional methods\n                    case 'signTransaction':\n                    case 'signAllTransactions':\n                        throw new Error(`Blocto is program wallet, which doesn't support ${payload.method}. Use signAndSendTransaction instead.`);\n                    default:\n                        response = yield this.handleReadRequests(payload);\n                }\n                if (response && !response.result && response.error) {\n                    const errorMessage = response.error.message\n                        ? response.error.message\n                        : 'Request failed';\n                    throw new Error(errorMessage);\n                }\n                if (response)\n                    return response.result;\n                return result;\n            }\n            catch (error) {\n                console.error(error);\n                throw error;\n            }\n        });\n    }\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const existedSDK = window.solana;\n            if (existedSDK && existedSDK.isBlocto) {\n                return new Promise((resolve) => {\n                    existedSDK.on('connect', () => {\n                        setChainAddress(this.sessionKey, CHAIN.SOLANA, [\n                            existedSDK.publicKey.toBase58(),\n                        ]);\n                        resolve();\n                    });\n                    existedSDK.connect();\n                });\n            }\n            return new Promise((resolve, reject) => {\n                if (typeof window === 'undefined') {\n                    return reject('Currently only supported in browser');\n                }\n                if (getChainAddress(this.sessionKey, CHAIN.SOLANA)) {\n                    return resolve();\n                }\n                const location = encodeURIComponent(window.location.origin);\n                const loginFrame = createFrame(`${this.server}/${this.appId}/solana/authn?l6n=${location}&v=${SDK_VERSION}`);\n                attachFrame(loginFrame);\n                addSelfRemovableHandler('message', (event, removeListener) => {\n                    const e = event;\n                    if (e.origin === this.server) {\n                        if (e.data.type === 'SOL:FRAME:RESPONSE') {\n                            removeListener();\n                            detatchFrame(loginFrame);\n                            this.eventListeners.connect.forEach((listener) => listener(this.net));\n                            setAccountStorage(this.sessionKey, {\n                                code: e.data.code,\n                                connected: true,\n                                accounts: {\n                                    [CHAIN.SOLANA]: [e.data.addr],\n                                },\n                            }, e.data.exp);\n                            resolve();\n                        }\n                        if (e.data.type === 'SOL:FRAME:CLOSE') {\n                            removeListener();\n                            detatchFrame(loginFrame);\n                            reject(new Error('User declined the login request'));\n                        }\n                    }\n                });\n            });\n        });\n    }\n    disconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const existedSDK = window.solana;\n            if (existedSDK && existedSDK.isBlocto) {\n                yield existedSDK.disconnect();\n                return;\n            }\n            this.eventListeners.disconnect.forEach((listener) => listener(null));\n            removeChainAddress(this.sessionKey, CHAIN.SOLANA);\n        });\n    }\n    fetchAccounts() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const sessionId = ((_a = getAccountStorage(this.sessionKey)) === null || _a === void 0 ? void 0 : _a.code) || '';\n            const { accounts } = yield fetch(`${this.server}/api/solana/accounts`, {\n                headers: {\n                    // We already check the existence in the constructor\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    'Blocto-Application-Identifier': this.appId,\n                    'Blocto-Session-Identifier': sessionId,\n                },\n            }).then((response) => responseSessionGuard(response, this.sessionKey));\n            setChainAddress(this.sessionKey, CHAIN.SOLANA, accounts);\n            return accounts;\n        });\n    }\n    handleReadRequests(payload) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return fetch(this.rpc, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(Object.assign({ id: 1, jsonrpc: '2.0' }, payload)),\n            }).then((response) => response.json());\n        });\n    }\n    // solana web3 utility\n    convertToProgramWalletTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const existedSDK = window.solana;\n            if (existedSDK && existedSDK.isBlocto) {\n                return existedSDK.convertToProgramWalletTransaction(transaction);\n            }\n            const message = yield this.request({\n                method: 'convertToProgramWalletTransaction',\n                params: {\n                    message: transaction.serializeMessage().toString('hex'),\n                },\n            });\n            return this.toTransaction(message, []);\n        });\n    }\n    // solana web3 utility\n    signAndSendTransaction(transaction, connection) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const existedSDK = window.solana;\n            if (existedSDK && existedSDK.isBlocto) {\n                return existedSDK.signAndSendTransaction(transaction);\n            }\n            const extra = {};\n            if (connection) {\n                if (connection.commitment)\n                    extra.commitment = connection.commitment;\n                // if the connection object passed-in has different rpc endpoint, reconnect to it\n                // eslint-disable-next-line no-underscore-dangle\n                const rpc = connection ? connection._rpcEndpoint : null;\n                if (rpc && rpc !== this.rpc) {\n                    this.rpc = rpc;\n                    this.disconnect();\n                    yield this.connect();\n                }\n            }\n            return this.request({\n                method: 'signAndSendTransaction',\n                params: Object.assign({ signatures: yield this.collectSignatures(transaction), message: transaction.serializeMessage().toString('hex') }, extra),\n            });\n        });\n    }\n    // solana web3 utility\n    // eslint-disable-next-line class-methods-use-this\n    toTransaction(raw, signatures) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const message = Solana.Message.from(Buffer.from(raw, 'hex'));\n            const transaction = new Solana.Transaction();\n            transaction.recentBlockhash = message.recentBlockhash;\n            if (message.header.numRequiredSignatures > 0) {\n                transaction.feePayer = message.accountKeys[0];\n            }\n            signatures.forEach((signature, index) => {\n                const sigPubkeyPair = {\n                    signature: signature === Solana.PublicKey.default.toBase58()\n                        ? null\n                        : bs58$1.decode(signature),\n                    publicKey: message.accountKeys[index],\n                };\n                transaction.signatures.push(sigPubkeyPair);\n            });\n            message.instructions.forEach((instruction) => {\n                const keys = instruction.accounts.map((account) => {\n                    const pubkey = message.accountKeys[account];\n                    return {\n                        pubkey,\n                        isSigner: account < message.header.numRequiredSignatures,\n                        isWritable: message.isAccountWritable(account),\n                    };\n                });\n                transaction.instructions.push(new Solana.TransactionInstruction({\n                    keys,\n                    programId: message.accountKeys[instruction.programIdIndex],\n                    data: bs58$1.decode(instruction.data),\n                }));\n            });\n            return transaction;\n        });\n    }\n    // solana web3 utility\n    // eslint-disable-next-line class-methods-use-this\n    collectSignatures(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return transaction.signatures.reduce((acc, cur) => {\n                if (cur.signature) {\n                    acc[cur.publicKey.toBase58()] = cur.signature.toString('hex');\n                }\n                return acc;\n            }, {});\n        });\n    }\n    handleConvertTransaction(payload) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const sessionId = ((_a = getAccountStorage(this.sessionKey)) === null || _a === void 0 ? void 0 : _a.code) || '';\n            return fetch(`${this.server}/api/solana/convertToWalletTx`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    // We already check the existence in the constructor\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    'Blocto-Application-Identifier': this.appId,\n                    'Blocto-Session-Identifier': sessionId,\n                },\n                body: JSON.stringify(payload.params),\n            }).then((response) => responseSessionGuard(response, this.sessionKey));\n        });\n    }\n    handleSignAndSendTransaction(payload) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const sessionId = ((_a = getAccountStorage(this.sessionKey)) === null || _a === void 0 ? void 0 : _a.code) || '';\n            const { authorizationId } = yield fetch(`${this.server}/api/solana/authz`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    // We already check the existence in the constructor\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    'Blocto-Application-Identifier': this.appId,\n                    'Blocto-Session-Identifier': sessionId,\n                },\n                body: JSON.stringify(payload.params),\n            }).then((response) => responseSessionGuard(response, this.sessionKey));\n            if (typeof window === 'undefined') {\n                throw new Error('Currently only supported in browser');\n            }\n            const authzFrame = createFrame(`${this.server}/${this.appId}/solana/authz/${authorizationId}`);\n            attachFrame(authzFrame);\n            return new Promise((resolve, reject) => addSelfRemovableHandler('message', (event, removeEventListener) => {\n                const e = event;\n                if (e.origin === this.server &&\n                    e.data.type === 'SOL:FRAME:RESPONSE') {\n                    if (e.data.status === 'APPROVED') {\n                        removeEventListener();\n                        detatchFrame(authzFrame);\n                        resolve(e.data.txHash);\n                    }\n                    if (e.data.status === 'DECLINED') {\n                        removeEventListener();\n                        detatchFrame(authzFrame);\n                        if (e.data.errorCode === 'incorrect_session_id') {\n                            this.disconnect();\n                        }\n                        reject(new Error(e.data.errorMessage));\n                    }\n                }\n            }));\n        });\n    }\n}\n\nconst checkMessagePayloadFormat = (payload) => {\n    var _a, _b;\n    const formattedPayload = Object.assign({}, payload);\n    const { message, nonce, address, application, chainId } = payload;\n    if (typeof message !== 'string') {\n        formattedPayload.message = (_a = String(message)) !== null && _a !== void 0 ? _a : '';\n    }\n    if (typeof nonce !== 'string') {\n        formattedPayload.nonce = (_b = String(nonce)) !== null && _b !== void 0 ? _b : '';\n    }\n    if (address && typeof address !== 'boolean') {\n        formattedPayload.address = !!address;\n    }\n    if (application && typeof application !== 'boolean') {\n        formattedPayload.application = !!application;\n    }\n    if (chainId && typeof chainId !== 'boolean') {\n        formattedPayload.chainId = !!chainId;\n    }\n    return formattedPayload;\n};\nclass AptosProvider extends BloctoProvider {\n    constructor({ chainId, server, appId }) {\n        super();\n        this.publicKey = [];\n        this.authKey = '';\n        invariant(chainId, \"'chainId' is required\");\n        invariant(appId, 'It is necessary to interact with Blocto wallet via your app id. Please visit https://developers.blocto.app for more details.');\n        this.chainId = chainId;\n        this.networkName = APT_CHAIN_ID_NAME_MAPPING[chainId];\n        this.api = APT_CHAIN_ID_RPC_MAPPING[chainId];\n        this.sessionKey = APT_SESSION_KEY_MAPPING[chainId];\n        const defaultServer = APT_CHAIN_ID_SERVER_MAPPING[chainId];\n        this.appId = appId || DEFAULT_APP_ID;\n        this.server = server || defaultServer || '';\n    }\n    get publicAccount() {\n        var _a;\n        return {\n            address: ((_a = getChainAddress(this.sessionKey, CHAIN.APTOS)) === null || _a === void 0 ? void 0 : _a[0]) || null,\n            publicKey: this.publicKey.length ? this.publicKey : null,\n            // @todo: provide authkey\n            authKey: null,\n            minKeysRequired: 2,\n        };\n    }\n    network() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return {\n                name: this.networkName,\n                api: this.api,\n                chainId: this.chainId.toString(),\n            };\n        });\n    }\n    isConnected() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            return !!((_a = getAccountStorage(this.sessionKey)) === null || _a === void 0 ? void 0 : _a.code);\n        });\n    }\n    signTransaction(transaction) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const existedSDK = window.bloctoAptos;\n            if (existedSDK) {\n                return existedSDK.signTransaction(transaction);\n            }\n            const hasConnected = yield this.isConnected();\n            if (!hasConnected) {\n                yield this.connect();\n            }\n            if (!((_a = getChainAddress(this.sessionKey, CHAIN.APTOS)) === null || _a === void 0 ? void 0 : _a.length)) {\n                throw new Error('Fail to get account');\n            }\n            throw new Error('signTransaction method not supported.');\n        });\n    }\n    disconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const existedSDK = window.bloctoAptos;\n            if (existedSDK) {\n                yield existedSDK.disconnect();\n                return;\n            }\n            removeChainAddress(this.sessionKey, CHAIN.APTOS);\n        });\n    }\n    signAndSubmitTransaction(transaction, txOptions = {}) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const existedSDK = window.bloctoAptos;\n            if (existedSDK) {\n                return existedSDK.signAndSubmitTransaction(transaction, txOptions);\n            }\n            const hasConnected = yield this.isConnected();\n            if (!hasConnected) {\n                yield this.connect();\n            }\n            if (!((_a = getChainAddress(this.sessionKey, CHAIN.APTOS)) === null || _a === void 0 ? void 0 : _a.length)) {\n                throw new Error('Fail to get account');\n            }\n            const sessionId = ((_b = getAccountStorage(this.sessionKey)) === null || _b === void 0 ? void 0 : _b.code) || '';\n            const { authorizationId } = yield fetch(`${this.server}/api/aptos/authz`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    // We already check the existence in the constructor\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    'Blocto-Application-Identifier': this.appId,\n                    'Blocto-Session-Identifier': sessionId,\n                },\n                body: JSON.stringify(Object.assign(Object.assign({}, transaction), txOptions)),\n            }).then((response) => responseSessionGuard(response, this.sessionKey));\n            if (typeof window === 'undefined') {\n                throw new Error('Currently only supported in browser');\n            }\n            const authzFrame = createFrame(`${this.server}/${this.appId}/aptos/authz/${authorizationId}`);\n            attachFrame(authzFrame);\n            return new Promise((resolve, reject) => addSelfRemovableHandler('message', (event, removeEventListener) => {\n                const e = event;\n                if (e.origin === this.server &&\n                    e.data.type === 'APTOS:FRAME:RESPONSE') {\n                    if (e.data.status === 'APPROVED') {\n                        removeEventListener();\n                        detatchFrame(authzFrame);\n                        resolve({ hash: e.data.txHash });\n                    }\n                    if (e.data.status === 'DECLINED') {\n                        removeEventListener();\n                        detatchFrame(authzFrame);\n                        if (e.data.errorCode === 'incorrect_session_id') {\n                            this.disconnect();\n                        }\n                        reject(new Error(e.data.errorMessage));\n                    }\n                }\n            }));\n        });\n    }\n    signMessage(payload) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const existedSDK = window.bloctoAptos;\n            const formattedPayload = checkMessagePayloadFormat(payload);\n            if (existedSDK) {\n                return existedSDK.signMessage(formattedPayload);\n            }\n            const hasConnected = yield this.isConnected();\n            if (!hasConnected) {\n                yield this.connect();\n            }\n            if (!((_a = getChainAddress(this.sessionKey, CHAIN.APTOS)) === null || _a === void 0 ? void 0 : _a.length)) {\n                throw new Error('Fail to get account');\n            }\n            if (typeof window === 'undefined') {\n                throw new Error('Currently only supported in browser');\n            }\n            const sessionId = ((_b = getAccountStorage(this.sessionKey)) === null || _b === void 0 ? void 0 : _b.code) || '';\n            const { signatureId } = yield fetch(`${this.server}/api/aptos/user-signature`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    // We already check the existence in the constructor\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    'Blocto-Application-Identifier': this.appId,\n                    'Blocto-Session-Identifier': sessionId,\n                },\n                body: JSON.stringify(formattedPayload),\n            }).then((response) => responseSessionGuard(response, this.sessionKey));\n            const url = `${this.server}/${this.appId}/aptos/user-signature/${signatureId}`;\n            const signFrame = createFrame(url);\n            attachFrame(signFrame);\n            return new Promise((resolve, reject) => addSelfRemovableHandler('message', (event, removeEventListener) => {\n                const e = event;\n                if (e.origin === this.server &&\n                    e.data.type === 'APTOS:FRAME:RESPONSE') {\n                    if (e.data.status === 'APPROVED') {\n                        removeEventListener();\n                        detatchFrame(signFrame);\n                        resolve(e.data);\n                    }\n                    if (e.data.status === 'DECLINED') {\n                        removeEventListener();\n                        detatchFrame(signFrame);\n                        if (e.data.errorCode === 'incorrect_session_id') {\n                            this.disconnect();\n                        }\n                        reject(new Error(e.data.errorMessage));\n                    }\n                }\n            }));\n        });\n    }\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const existedSDK = window.bloctoAptos;\n            if (existedSDK) {\n                return new Promise((resolve, reject) => \n                // add a small delay to make sure the network has been switched\n                setTimeout(() => existedSDK.connect().then(resolve).catch(reject), 10));\n            }\n            return new Promise((resolve, reject) => {\n                var _a, _b;\n                if (typeof window === 'undefined') {\n                    return reject('Currently only supported in browser');\n                }\n                if ((_a = getChainAddress(this.sessionKey, CHAIN.APTOS)) === null || _a === void 0 ? void 0 : _a.length) {\n                    return resolve({\n                        address: ((_b = getChainAddress(this.sessionKey, CHAIN.APTOS)) === null || _b === void 0 ? void 0 : _b[0]) || null,\n                        publicKey: this.publicKey,\n                        authKey: null,\n                        minKeysRequired: 2,\n                    });\n                }\n                const location = encodeURIComponent(window.location.origin);\n                const loginFrame = createFrame(`${this.server}/${this.appId}/aptos/authn?l6n=${location}&v=${SDK_VERSION}}`);\n                attachFrame(loginFrame);\n                addSelfRemovableHandler('message', (event, removeListener) => __awaiter(this, void 0, void 0, function* () {\n                    var _c, _d, _e;\n                    const e = event;\n                    if (e.origin === this.server) {\n                        if (e.data.type === 'APTOS:FRAME:RESPONSE') {\n                            removeListener();\n                            detatchFrame(loginFrame);\n                            setAccountStorage(this.sessionKey, {\n                                code: e.data.code,\n                                connected: true,\n                                accounts: {\n                                    [CHAIN.APTOS]: [e.data.addr],\n                                },\n                            }, e.data.exp);\n                            if ((_c = getChainAddress(this.sessionKey, CHAIN.APTOS)) === null || _c === void 0 ? void 0 : _c.length) {\n                                try {\n                                    const { public_keys: publicKeys } = yield fetch(`${this.server}/blocto/aptos/accounts/${(_d = getChainAddress(this.sessionKey, CHAIN.APTOS)) === null || _d === void 0 ? void 0 : _d[0]}`).then((response) => response.json());\n                                    this.publicKey = publicKeys || [];\n                                    resolve({\n                                        address: ((_e = getChainAddress(this.sessionKey, CHAIN.APTOS)) === null || _e === void 0 ? void 0 : _e[0]) || '',\n                                        publicKey: this.publicKey,\n                                        authKey: null,\n                                        minKeysRequired: 2,\n                                    });\n                                }\n                                catch (err) {\n                                    return reject(e);\n                                }\n                            }\n                            else {\n                                // @todo: better error\n                                return reject();\n                            }\n                        }\n                        if (e.data.type === 'APTOS:FRAME:CLOSE') {\n                            removeListener();\n                            detatchFrame(loginFrame);\n                            reject(new Error('User declined the login request'));\n                        }\n                    }\n                }));\n            });\n        });\n    }\n    fetchAddress() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const sessionId = ((_a = getAccountStorage(this.sessionKey)) === null || _a === void 0 ? void 0 : _a.code) || '';\n            const { accounts } = yield fetch(`${this.server}/api/aptos/accounts`, {\n                headers: {\n                    // We already check the existence in the constructor\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    'Blocto-Application-Identifier': this.appId,\n                    'Blocto-Session-Identifier': sessionId,\n                },\n            }).then((response) => responseSessionGuard(response, this.sessionKey));\n            setChainAddress(this.sessionKey, CHAIN.APTOS, accounts);\n            return (accounts === null || accounts === void 0 ? void 0 : accounts[0]) || '';\n        });\n    }\n}\n\nclass BloctoSDK {\n    constructor({ appId, ethereum, solana, aptos }) {\n        if (ethereum) {\n            this.ethereum = new EthereumProvider(Object.assign(Object.assign({}, ethereum), { appId }));\n        }\n        if (solana) {\n            this.solana = new SolanaProvider(Object.assign(Object.assign({}, solana), { appId }));\n        }\n        if (aptos) {\n            this.aptos = new AptosProvider(Object.assign(Object.assign({}, aptos), { appId }));\n        }\n    }\n}\n\nexport { BloctoSDK as default };\n"],
  "mappings": "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",
  "names": ["Fp", "randomBytes", "uvRatio", "adjustScalarBytes", "inRange", "G", "A", "B", "F", "C", "D", "E", "H", "X3", "Y3", "T3", "Z3", "f", "cofactor", "getPublicKey", "concatBytes", "sign", "verify", "publicKey", "utils", "init_utils", "validateOpts", "adjustScalarBytes", "swap", "_0n", "_1n", "publicKey", "init_utils", "_2n", "_1n", "v3", "pow", "mod", "_0n", "init_utils", "number", "base", "ALPHABET", "encode", "i", "j", "decode", "string", "basex", "ALPHABET", "require_src", "base", "ALPHABET", "encode", "i", "j", "decode", "string", "require_bs58", "basex", "ALPHABET", "TextDecoder", "string", "offset", "mod", "array", "string", "serialize", "arr", "deserialize", "deserializeUnchecked", "offset", "src", "span", "union", "Boolean", "toBigIntLE", "toBufferLE", "isIterable", "x", "isObject", "Symbol", "iterator", "print", "value", "JSON", "stringify", "shiftIterator", "input", "done", "next", "undefined", "toFailure", "result", "context", "struct", "message", "path", "branch", "type", "refinement", "key", "length", "toFailures", "r", "failure", "run", "options", "coerce", "mask", "ctx", "coercer", "schema", "Array", "isArray", "valid", "validator", "k", "v", "s", "entries", "ts", "t", "Map", "set", "Set", "add", "refiner", "assert", "validate", "create", "is", "tuples", "tuple", "error", "StructError", "define", "name", "Struct", "any", "array", "Element", "i", "slice", "boolean", "instance", "Class", "literal", "constant", "description", "never", "nullable", "number", "isNaN", "optional", "record", "Key", "Value", "string", "Elements", "Never", "Math", "max", "keys", "Object", "union", "Structs", "map", "join", "failures", "S", "first", "push", "unknown", "condition", "TypeError", "constructor", "cached", "rest", "msg", "assign", "props", "validate", "arr", "offset", "offset", "arr", "version", "offset", "offset", "arr", "version", "require_browser", "self", "err", "_typeof", "obj", "_typeof", "_regeneratorRuntime", "exports", "define", "self", "record", "value", "next", "key", "type", "self", "_classCallCheck", "instance", "_typeof", "_toPrimitive", "_typeof", "_toPropertyKey", "_defineProperties", "_createClass", "_setPrototypeOf", "o", "p", "_inherits", "_assertThisInitialized", "self", "_typeof", "_possibleConstructorReturn", "self", "_getPrototypeOf", "o", "_createSuper", "_isNativeReflectConstruct", "CommonClient", "_createSuper", "_isNativeReflectConstruct", "WebSocketBrowserImpl", "type", "isOnCurve", "publicKey", "ed25519", "ExtendedPoint", "fromHex", "isPublicKeyData", "value", "_bn", "undefined", "getAlloc", "type", "fields", "getItemAlloc", "item", "span", "alloc", "property", "field", "Array", "isArray", "length", "elementLayout", "layout", "forEach", "decodeLength", "bytes", "len", "size", "elem", "shift", "encodeLength", "rem_len", "push", "assert", "condition", "message", "Error", "sendAndConfirmTransaction", "connection", "transaction", "signers", "options", "sendOptions", "skipPreflight", "preflightCommitment", "commitment", "maxRetries", "minContextSlot", "signature", "sendTransaction", "status", "recentBlockhash", "lastValidBlockHeight", "confirmTransaction", "abortSignal", "blockhash", "minNonceContextSlot", "nonceInfo", "nonceInstruction", "nonceAccountPubkey", "keys", "pubkey", "nonceValue", "nonce", "console", "warn", "err", "JSON", "stringify", "sleep", "ms", "Promise", "resolve", "setTimeout", "encodeData", "allocLength", "Layout", "data", "Buffer", "layoutFields", "Object", "assign", "instruction", "index", "encode", "decodeData", "buffer", "decode", "trailingZeros", "n", "nextPowerOfTwo", "decoded", "typeIndex", "makeWebsocketUrl", "endpoint", "matches", "match", "URL_RE", "TypeError", "_", "hostish", "portWithColon", "rest", "protocol", "startsWith", "startPort", "parseInt", "slice", "websocketPort", "assertEndpointUrl", "putativeUrl", "test", "extractCommitmentFromConfig", "commitmentOrConfig", "config", "specifiedCommitment", "specifiedConfig", "createRpcResult", "result", "union", "pick", "jsonrpc", "literal", "id", "string", "error", "code", "unknown", "optional", "any", "jsonRpcResult", "schema", "coerce", "UnknownRpcResult", "create", "jsonRpcResultAndContext", "context", "slot", "number", "notificationResultAndContext", "versionedMessageFromResponse", "version", "response", "MessageV0", "header", "staticAccountKeys", "accountKeys", "map", "accountKey", "PublicKey", "compiledInstructions", "instructions", "ix", "programIdIndex", "accountKeyIndexes", "accounts", "bs58", "addressTableLookups", "Message", "createRpcClient", "url", "httpHeaders", "customFetch", "fetchMiddleware", "disableRetryOnRateLimit", "httpAgent", "fetch", "fetchImpl", "agent", "fetchWithMiddleware", "info", "init", "modifiedFetchArgs", "reject", "modifiedInfo", "modifiedInit", "clientBrowser", "RpcClient", "request", "callback", "method", "body", "headers", "COMMON_HTTP_HEADERS", "too_many_requests_retries", "res", "waitTime", "log", "statusText", "text", "ok", "createRpcRequest", "client", "args", "createRpcBatchRequest", "requests", "batch", "params", "methodName", "parseAuthorizedVoter", "authorizedVoter", "epoch", "parsePriorVoters", "authorizedPubkey", "epochOfLastAuthorizedSwitch", "targetEpoch", "getPriorVoters", "buf", "idx", "isEmpty", "clusterApiUrl", "cluster", "tls", "key", "sendAndConfirmRawTransaction", "rawTransaction", "confirmationStrategyOrConfirmOptions", "maybeConfirmOptions", "confirmationStrategy", "prototype", "hasOwnProperty", "call", "sendRawTransaction", "confirmationPromise", "generatePrivateKey", "generateKeypair", "getPublicKey", "sign", "verify", "toBuffer", "Struct", "Enum", "SOLANA_SCHEMA", "MAX_SEED_LENGTH", "PUBLIC_KEY_LENGTH", "uniquePublicKeyCounter", "Account", "BPF_LOADER_DEPRECATED_PROGRAM_ID", "PACKET_DATA_SIZE", "VERSION_PREFIX_MASK", "SIGNATURE_LENGTH_IN_BYTES", "TransactionExpiredBlockheightExceededError", "TransactionExpiredTimeoutError", "TransactionExpiredNonceInvalidError", "MessageAccountKeys", "rustString", "authorized", "lockup", "voteInit", "voteAuthorizeWithSeedArgs", "CompiledKeys", "VersionedMessage", "TransactionStatus", "DEFAULT_SIGNATURE", "TransactionInstruction", "Transaction", "TransactionMessage", "VersionedTransaction", "NUM_TICKS_PER_SECOND", "DEFAULT_TICKS_PER_SLOT", "NUM_SLOTS_PER_SECOND", "MS_PER_SLOT", "SYSVAR_CLOCK_PUBKEY", "SYSVAR_EPOCH_SCHEDULE_PUBKEY", "SYSVAR_INSTRUCTIONS_PUBKEY", "SYSVAR_RECENT_BLOCKHASHES_PUBKEY", "SYSVAR_RENT_PUBKEY", "SYSVAR_REWARDS_PUBKEY", "SYSVAR_SLOT_HASHES_PUBKEY", "SYSVAR_SLOT_HISTORY_PUBKEY", "SYSVAR_STAKE_HISTORY_PUBKEY", "FeeCalculatorLayout", "NonceAccountLayout", "NONCE_ACCOUNT_LENGTH", "NonceAccount", "encodeDecode", "bigInt", "u64", "SystemInstruction", "SYSTEM_INSTRUCTION_LAYOUTS", "SystemProgram", "CHUNK_SIZE", "Loader", "BPF_LOADER_PROGRAM_ID", "BpfLoader", "MINIMUM_SLOT_PER_EPOCH", "EpochSchedule", "SendTransactionError", "SolanaJSONRPCErrorCode", "SolanaJSONRPCError", "RpcWebSocketClient", "LOOKUP_TABLE_META_SIZE", "AddressLookupTableAccount", "LookupTableMetaLayout", "PublicKeyFromString", "RawAccountDataResult", "BufferFromRawAccountData", "BLOCKHASH_CACHE_TIMEOUT_MS", "GetInflationGovernorResult", "GetInflationRewardResult", "GetRecentPrioritizationFeesResult", "GetInflationRateResult", "GetEpochInfoResult", "GetEpochScheduleResult", "GetLeaderScheduleResult", "TransactionErrorResult", "SignatureStatusResult", "SignatureReceivedResult", "VersionResult", "SimulatedTransactionResponseStruct", "BlockProductionResponseStruct", "GetInflationGovernorRpcResult", "GetInflationRateRpcResult", "GetRecentPrioritizationFeesRpcResult", "GetEpochInfoRpcResult", "GetEpochScheduleRpcResult", "GetLeaderScheduleRpcResult", "SlotRpcResult", "GetSupplyRpcResult", "TokenAmountResult", "GetTokenLargestAccountsResult", "GetTokenAccountsByOwner", "ParsedAccountDataResult", "GetParsedTokenAccountsByOwner", "GetLargestAccountsRpcResult", "AccountInfoResult", "KeyedAccountInfoResult", "ParsedOrRawAccountData", "ParsedAccountInfoResult", "KeyedParsedAccountInfoResult", "StakeActivationResult", "GetConfirmedSignaturesForAddress2RpcResult", "GetSignaturesForAddressRpcResult", "AccountNotificationResult", "ProgramAccountInfoResult", "ProgramAccountNotificationResult", "SlotInfoResult", "SlotNotificationResult", "SlotUpdateResult", "SlotUpdateNotificationResult", "SignatureNotificationResult", "RootNotificationResult", "ContactInfoResult", "VoteAccountInfoResult", "GetVoteAccounts", "ConfirmationStatus", "SignatureStatusResponse", "GetSignatureStatusesRpcResult", "GetMinimumBalanceForRentExemptionRpcResult", "AddressTableLookupStruct", "ConfirmedTransactionResult", "AnnotatedAccountKey", "ConfirmedTransactionAccountsModeResult", "ParsedInstructionResult", "RawInstructionResult", "InstructionResult", "UnknownInstructionResult", "ParsedOrRawInstruction", "ParsedConfirmedTransactionResult", "TokenBalanceResult", "LoadedAddressesResult", "ConfirmedTransactionMetaResult", "ParsedConfirmedTransactionMetaResult", "TransactionVersionStruct", "RewardsResult", "GetBlockRpcResult", "GetNoneModeBlockRpcResult", "GetAccountsModeBlockRpcResult", "GetParsedBlockRpcResult", "GetParsedAccountsModeBlockRpcResult", "GetParsedNoneModeBlockRpcResult", "GetConfirmedBlockRpcResult", "GetBlockSignaturesRpcResult", "GetTransactionRpcResult", "GetParsedTransactionRpcResult", "GetRecentBlockhashAndContextRpcResult", "GetLatestBlockhashRpcResult", "PerfSampleResult", "GetRecentPerformanceSamplesRpcResult", "GetFeeCalculatorRpcResult", "RequestAirdropRpcResult", "SendTransactionRpcResult", "LogsResult", "LogsNotificationResult", "Connection", "Keypair", "LOOKUP_TABLE_INSTRUCTION_LAYOUTS", "AddressLookupTableInstruction", "AddressLookupTableProgram", "ComputeBudgetInstruction", "COMPUTE_BUDGET_INSTRUCTION_LAYOUTS", "ComputeBudgetProgram", "PRIVATE_KEY_BYTES", "PUBLIC_KEY_BYTES", "SIGNATURE_BYTES", "ED25519_INSTRUCTION_LAYOUT", "Ed25519Program", "ecdsaSign", "publicKeyCreate", "ETHEREUM_ADDRESS_BYTES", "SIGNATURE_OFFSETS_SERIALIZED_SIZE", "SECP256K1_INSTRUCTION_LAYOUT", "Secp256k1Program", "STAKE_CONFIG_ID", "Authorized", "Lockup", "StakeInstruction", "STAKE_INSTRUCTION_LAYOUTS", "StakeAuthorizationLayout", "StakeProgram", "VoteInit", "VoteInstruction", "VOTE_INSTRUCTION_LAYOUTS", "VoteAuthorizationLayout", "VoteProgram", "VALIDATOR_INFO_KEY", "InfoString", "ValidatorInfo", "VOTE_PROGRAM_ID", "VoteAccountLayout", "VoteAccount", "LAMPORTS_PER_SOL", "utils", "randomPrivateKey", "privateScalar", "secretKey", "Uint8Array", "set", "arr", "isBuffer", "from", "byteOffset", "byteLength", "constructor", "properties", "serialize", "deserialize", "decodeUnchecked", "deserializeUnchecked", "enum", "Map", "Symbol", "toStringTag", "BN", "unique", "equals", "eq", "toBase58", "toBytes", "toJSON", "b", "toArrayLike", "zeroPad", "copy", "toString", "createWithSeed", "fromPublicKey", "seed", "programId", "concat", "publicKeyBytes", "sha256", "createProgramAddressSync", "seeds", "createProgramAddress", "findProgramAddressSync", "address", "seedsWithNonce", "findProgramAddress", "pubkeyData", "default", "kind", "_publicKey", "_secretKey", "secretKeyBuffer", "defineProperty", "timeoutSeconds", "toFixed", "accountKeysFromLookups", "keySegments", "writable", "readonly", "get", "keySegment", "flat", "compileInstructions", "U8_MAX", "keyIndexMap", "findKeyIndex", "keyIndex", "meta", "blob", "rsl", "struct", "u32", "offset", "_decode", "bind", "_encode", "rslShim", "str", "chars", "ns64", "u8", "payer", "keyMetaMap", "compile", "getOrInsertDefault", "keyMeta", "isSigner", "isWritable", "isInvoked", "payerKeyMeta", "accountMeta", "getMessageComponents", "mapEntries", "entries", "writableSigners", "filter", "readonlySigners", "writableNonSigners", "readonlyNonSigners", "numRequiredSignatures", "numReadonlySignedAccounts", "numReadonlyUnsignedAccounts", "payerAddress", "extractTableLookup", "lookupTable", "writableIndexes", "drainedWritableKeys", "drainKeysFoundInLookupTable", "state", "addresses", "readonlyIndexes", "drainedReadonlyKeys", "lookupTableEntries", "keyMetaFilter", "lookupTableIndexes", "drainedKeys", "lookupTableIndex", "findIndex", "entry", "delete", "indexToProgramIds", "account", "getAccountKeys", "compiledKeys", "payerKey", "isAccountSigner", "isAccountWritable", "numSignedAccounts", "unsignedAccountIndex", "numUnsignedAccounts", "numWritableUnsignedAccounts", "numWritableSignedAccounts", "isProgramId", "has", "programIds", "values", "nonProgramIds", "numKeys", "keyCount", "shortvec", "keyIndicesCount", "dataCount", "keyIndices", "dataLength", "instructionCount", "instructionBuffer", "instructionBufferLength", "instructionLayout", "seq", "signDataLayout", "signData", "byteArray", "accountCount", "i", "dataSlice", "messageArgs", "numAccountKeysFromLookups", "count", "lookup", "addressLookupTableAccounts", "resolveAddressTableLookups", "numStaticAccountKeys", "lookupAccountKeysIndex", "numWritableLookupAccountKeys", "reduce", "tableLookup", "tableAccount", "find", "lookupTableAccounts", "extractResult", "addressTableLookup", "encodedStaticAccountKeysLength", "serializedInstructions", "serializeInstructions", "encodedInstructionsLength", "serializedAddressTableLookups", "serializeAddressTableLookups", "encodedAddressTableLookupsLength", "messageLayout", "serializedMessage", "MESSAGE_VERSION_0_PREFIX", "serializedMessageLength", "prefix", "staticAccountKeysLength", "instructionsLength", "addressTableLookupsLength", "serializedLength", "encodedAccountKeyIndexesLength", "encodedDataLength", "encodedWritableIndexesLength", "encodedReadonlyIndexesLength", "addressTableLookupLayout", "maskedPrefix", "splice", "accountKeyIndexesLength", "addressTableLookupsCount", "writableIndexesLength", "readonlyIndexesLength", "deserializeMessageVersion", "fill", "opts", "signatures", "feePayer", "_message", "_json", "add", "items", "compileMessage", "accountMetas", "includes", "uniqueMetas", "pubkeyString", "uniqueIndex", "x", "sort", "y", "localeMatcher", "usage", "sensitivity", "ignorePunctuation", "numeric", "caseFirst", "localeCompare", "feePayerIndex", "payerMeta", "unshift", "signedKeys", "unsignedKeys", "indexOf", "invariant", "_compile", "valid", "every", "pair", "serializeMessage", "getEstimatedFee", "getFeeForMessage", "setSigners", "seen", "Set", "uniqueSigners", "signer", "_partialSign", "partialSign", "_addSignature", "addSignature", "sigpair", "verifySignatures", "requireAllSignatures", "_verifySignatures", "_serialize", "signatureCount", "transactionLength", "wireTransaction", "keyObj", "populate", "sigPubkeyPair", "some", "decompile", "compiledIx", "compileToLegacyMessage", "compileToV0Message", "defaultSignatures", "encodedSignaturesLength", "transactionLayout", "serializedTransaction", "serializedTransactionLength", "signaturesLength", "messageData", "signerPubkeys", "signerIndex", "nu64", "feeCalculator", "fromAccountData", "nonceAccount", "bigIntLayout", "src", "toBigIntLE", "toBufferLE", "decodeInstructionType", "checkProgramId", "instructionTypeLayout", "ixType", "decodeCreateAccount", "checkKeyLength", "lamports", "space", "Create", "fromPubkey", "newAccountPubkey", "decodeTransfer", "Transfer", "toPubkey", "decodeTransferWithSeed", "TransferWithSeed", "basePubkey", "decodeAllocate", "Allocate", "accountPubkey", "decodeAllocateWithSeed", "base", "AllocateWithSeed", "decodeAssign", "Assign", "decodeAssignWithSeed", "AssignWithSeed", "decodeCreateWithSeed", "CreateWithSeed", "decodeNonceInitialize", "InitializeNonceAccount", "noncePubkey", "decodeNonceAdvance", "AdvanceNonceAccount", "decodeNonceWithdraw", "WithdrawNonceAccount", "decodeNonceAuthorize", "AuthorizeNonceAccount", "newAuthorizedPubkey", "expectedLength", "freeze", "UpgradeNonceAccount", "createAccount", "transfer", "BigInt", "createAccountWithSeed", "createNonceAccount", "initParams", "nonceInitialize", "instructionData", "nonceAdvance", "nonceWithdraw", "nonceAuthorize", "allocate", "getMinNumSignatures", "Math", "ceil", "chunkSize", "load", "program", "balanceNeeded", "getMinimumBalanceForRentExemption", "programInfo", "getAccountInfo", "executable", "owner", "dataLayout", "array", "transactions", "bytesLength", "bytesLengthPadding", "_rpcEndpoint", "REQUESTS_PER_SECOND", "all", "deployCommitment", "finalizeSignature", "currentSlot", "getSlot", "round", "elf", "loaderProgramId", "slotsPerEpoch", "leaderScheduleSlotOffset", "warmup", "firstNormalEpoch", "firstNormalSlot", "getEpoch", "getEpochAndSlotIndex", "epochLen", "getSlotsInEpoch", "slotIndex", "normalSlotIndex", "normalEpochIndex", "floor", "getFirstSlotInEpoch", "pow", "getLastSlotInEpoch", "logs", "JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP", "JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE", "JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE", "JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE", "JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY", "JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE", "JSON_RPC_SERVER_ERROR_SLOT_SKIPPED", "JSON_RPC_SERVER_ERROR_NO_SNAPSHOT", "JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED", "JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX", "JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE", "JSON_RPC_SCAN_ERROR", "JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH", "JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET", "JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION", "JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED", "customMessage", "name", "globalThis", "RpcWebSocketCommonClient", "generate_request_id", "webSocketFactory", "rpc", "createRpc", "autoconnect", "max_reconnects", "reconnect", "reconnect_interval", "underlyingSocket", "socket", "readyState", "notify", "isActive", "U64_MAX", "deactivationSlot", "accountData", "serializedAddressesLen", "numSerializedAddresses", "lastExtendedSlot", "lastExtendedSlotStartIndex", "lastExtendedStartIndex", "authority", "instance", "tuple", "foundation", "foundationTerm", "initial", "taper", "terminal", "nullable", "effectiveSlot", "amount", "postBalance", "commission", "prioritizationFee", "total", "validator", "slotsInEpoch", "absoluteSlot", "blockHeight", "transactionCount", "boolean", "record", "rentEpoch", "unitsConsumed", "returnData", "byIdentity", "range", "firstSlot", "lastSlot", "circulating", "nonCirculating", "nonCirculatingAccounts", "uiAmount", "decimals", "uiAmountString", "parsed", "active", "inactive", "memo", "blockTime", "subscription", "parent", "root", "timestamp", "stats", "numTransactionEntries", "numSuccessfulTransactions", "numFailedTransactions", "maxTransactionsPerEntry", "gossip", "tpu", "votePubkey", "nodePubkey", "activatedStake", "epochVoteAccount", "epochCredits", "lastVote", "rootSlot", "current", "delinquent", "confirmations", "confirmationStatus", "source", "accountIndex", "mint", "uiTokenAmount", "fee", "innerInstructions", "preBalances", "postBalances", "logMessages", "preTokenBalances", "postTokenBalances", "loadedAddresses", "computeUnitsConsumed", "rewardType", "previousBlockhash", "parentSlot", "rewards", "lamportsPerSignature", "numTransactions", "numSlots", "samplePeriodSecs", "process", "_commitment", "_confirmTransactionInitialTimeout", "_rpcWsEndpoint", "_rpcClient", "_rpcRequest", "_rpcBatchRequest", "_rpcWebSocket", "_rpcWebSocketConnected", "_rpcWebSocketHeartbeat", "_rpcWebSocketIdleTimeout", "_rpcWebSocketGeneration", "_disableBlockhashCaching", "_pollingBlockhash", "_blockhashInfo", "latestBlockhash", "lastFetch", "transactionSignatures", "simulatedSignatures", "_nextClientSubscriptionId", "_subscriptionDisposeFunctionsByClientSubscriptionId", "_subscriptionHashByClientSubscriptionId", "_subscriptionStateChangeCallbacksByHash", "_subscriptionCallbacksByServerSubscriptionId", "_subscriptionsByHash", "_subscriptionsAutoDisposedByRpc", "getBlockHeight", "requestPromises", "_buildArgs", "requestHash", "fastStableStringify", "unsafeRes", "wsEndpoint", "confirmTransactionInitialTimeout", "Infinity", "on", "_wsOnOpen", "_wsOnError", "_wsOnClose", "_wsOnAccountNotification", "_wsOnProgramAccountNotification", "_wsOnSlotNotification", "_wsOnSlotUpdatesNotification", "_wsOnSignatureNotification", "_wsOnRootNotification", "_wsOnLogsNotification", "rpcEndpoint", "getBalanceAndContext", "getBalance", "then", "catch", "e", "getBlockTime", "getMinimumLedgerSlot", "getFirstAvailableBlock", "getSupply", "configArg", "getTokenSupply", "tokenMintAddress", "getTokenAccountBalance", "tokenAddress", "getTokenAccountsByOwner", "ownerAddress", "_args", "getParsedTokenAccountsByOwner", "getLargestAccounts", "arg", "getTokenLargestAccounts", "mintAddress", "getAccountInfoAndContext", "getParsedAccountInfo", "getMultipleParsedAccounts", "publicKeys", "rawConfig", "getMultipleAccountsInfoAndContext", "getMultipleAccountsInfo", "getStakeActivation", "getProgramAccounts", "configOrCommitment", "encoding", "configWithoutEncoding", "baseSchema", "withContext", "getParsedProgramAccounts", "strategy", "rawSignature", "aborted", "reason", "decodedSignature", "confirmTransactionUsingLegacyTimeoutStrategy", "confirmTransactionUsingBlockHeightExceedanceStrategy", "confirmTransactionUsingDurableNonceStrategy", "getCancellationPromise", "signal", "addEventListener", "getTransactionConfirmationPromise", "signatureSubscriptionId", "disposeSignatureSubscriptionStateChangeObserver", "done", "onSignature", "__type", "PROCESSED", "subscriptionSetupPromise", "resolveSubscriptionSetup", "_onSubscriptionStateChange", "nextState", "getSignatureStatus", "abortConfirmation", "removeSignatureListener", "expiryPromise", "checkBlockHeight", "_e", "currentBlockHeight", "BLOCKHEIGHT_EXCEEDED", "cancellationPromise", "outcome", "race", "currentNonceValue", "lastCheckedSlot", "getCurrentNonceValue", "getNonceAndContext", "NONCE_INVALID", "slotInWhichNonceDidAdvance", "signatureStatus", "commitmentForStatus", "timeoutId", "timeoutMs", "TIMED_OUT", "clearTimeout", "getClusterNodes", "getVoteAccounts", "getSlotLeader", "getSlotLeaders", "startSlot", "limit", "getSignatureStatuses", "getTransactionCount", "getTotalSupply", "excludeNonCirculatingAccountsList", "getInflationGovernor", "getInflationReward", "getInflationRate", "getEpochInfo", "getEpochSchedule", "epochSchedule", "getLeaderSchedule", "getRecentBlockhashAndContext", "getRecentPerformanceSamples", "getFeeCalculatorForBlockhash", "wireMessage", "getRecentPrioritizationFees", "lockedWritableAccounts", "getRecentBlockhash", "getLatestBlockhash", "getLatestBlockhashAndContext", "getVersion", "getGenesisHash", "getBlock", "_buildArgsAtLeastConfirmed", "transactionDetails", "getParsedBlock", "getBlockProduction", "extra", "c", "getTransaction", "getParsedTransaction", "getParsedTransactions", "getTransactions", "getConfirmedBlock", "block", "getBlocks", "endSlot", "getBlockSignatures", "getConfirmedBlockSignatures", "getConfirmedTransaction", "getParsedConfirmedTransaction", "getParsedConfirmedTransactions", "getConfirmedSignaturesForAddress", "firstAvailableBlock", "until", "highestConfirmedRoot", "before", "confirmedSignatureInfo", "getConfirmedSignaturesForAddress2", "getSignaturesForAddress", "getAddressLookupTable", "accountInfo", "getNonce", "requestAirdrop", "to", "_blockhashWithExpiryBlockHeight", "disableCache", "timeSinceFetch", "Date", "now", "expired", "_pollNewBlockhash", "startTime", "cachedLatestBlockhash", "cachedBlockhash", "getStakeMinimumDelegation", "simulateTransaction", "transactionOrMessage", "configOrSigners", "includeAccounts", "versionedTx", "encodedTransaction", "originalTx", "sigVerify", "traceIndent", "logTrace", "join", "signersOrOptions", "sendEncodedTransaction", "setInterval", "_updateSubscriptions", "Number", "MAX_SAFE_INTEGER", "clearInterval", "hash", "_setSubscription", "nextSubscription", "prevState", "stateChangeCallbacks", "cb", "clientSubscriptionId", "close", "connect", "activeWebSocketGeneration", "isCurrentConnectionStillActive", "callbacks", "serverSubscriptionId", "unsubscribeMethod", "_handleServerNotification", "callbackArgs", "notification", "_makeSubscription", "subscriptionConfig", "existingSubscription", "onAccountChange", "removeAccountChangeListener", "_unsubscribeClientSubscription", "accountId", "onProgramAccountChange", "filters", "removeProgramAccountChangeListener", "onLogs", "mentions", "removeOnLogsListener", "onSlotChange", "removeSlotChangeListener", "onSlotUpdate", "removeSlotUpdateListener", "subscriptionName", "dispose", "override", "_err", "onSignatureWithOptions", "onRootChange", "removeRootChangeListener", "keypair", "_keypair", "generate", "fromSecretKey", "skipValidation", "computedPublicKey", "ii", "fromSeed", "CreateLookupTable", "bigintLayout", "FreezeLookupTable", "ExtendLookupTable", "DeactivateLookupTable", "CloseLookupTable", "layoutType", "decodeCreateLookupTable", "checkKeysLength", "recentSlot", "decodeExtendLookupTable", "decodeCloseLookupTable", "recipient", "decodeFreezeLookupTable", "decodeDeactivateLookupTable", "createLookupTable", "lookupTableAddress", "bumpSeed", "freezeLookupTable", "extendLookupTable", "addr", "deactivateLookupTable", "closeLookupTable", "decodeRequestUnits", "units", "additionalFee", "RequestUnits", "decodeRequestHeapFrame", "RequestHeapFrame", "decodeSetComputeUnitLimit", "SetComputeUnitLimit", "decodeSetComputeUnitPrice", "microLamports", "SetComputeUnitPrice", "requestUnits", "requestHeapFrame", "setComputeUnitLimit", "setComputeUnitPrice", "u16", "createInstructionWithPublicKey", "instructionIndex", "publicKeyOffset", "signatureOffset", "messageDataOffset", "numSignatures", "padding", "signatureInstructionIndex", "publicKeyInstructionIndex", "messageDataSize", "messageInstructionIndex", "createInstructionWithPrivateKey", "privateKey", "msgHash", "privKey", "secp256k1", "toCompactRawBytes", "recovery", "isValidPrivateKey", "publicKeyToEthAddress", "keccak_256", "recoveryId", "createInstructionWithEthAddress", "ethAddress", "rawAddress", "substr", "dataStart", "ethAddressOffset", "ethAddressInstructionIndex", "pkey", "messageHash", "staker", "withdrawer", "unixTimestamp", "custodian", "decodeInitialize", "Initialize", "stakePubkey", "decodeDelegate", "Delegate", "decodeAuthorize", "newAuthorized", "stakeAuthorizationType", "Authorize", "o", "custodianPubkey", "decodeAuthorizeWithSeed", "authoritySeed", "authorityOwner", "AuthorizeWithSeed", "authorityBase", "decodeSplit", "Split", "splitStakePubkey", "decodeMerge", "Merge", "sourceStakePubKey", "decodeWithdraw", "Withdraw", "decodeDeactivate", "Deactivate", "Staker", "Withdrawer", "initialize", "maybeLockup", "delegate", "authorize", "authorizeWithSeed", "splitInstruction", "split", "splitWithSeed", "merge", "withdraw", "deactivate", "authorizedWithdrawer", "decodeInitializeAccount", "InitializeAccount", "voteAuthorizationType", "currentAuthorityDerivedKeyOwnerPubkey", "currentAuthorityDerivedKeySeed", "currentAuthorityDerivedKeyBasePubkey", "authorizedWithdrawerPubkey", "Voter", "initializeAccount", "safeWithdraw", "currentVoteAccountBalance", "rentExemptMinimum", "website", "details", "keybaseUsername", "fromConfigData", "configKeyCount", "configKeys", "rawInfo", "parse", "assertType", "votes", "authorizedVoters", "priorVoters", "lastTimestamp", "versionOffset", "va", "rootSlotValid", "http", "devnet", "testnet", "https", "f", "KEY_SESSION", "CHAIN", "WalletAdapterNetwork", "instance", "obj", "_setPrototypeOf", "o", "p", "self", "_getPrototypeOf", "_construct", "Parent", "args", "Class", "_wrapNativeSuper", "stringify", "EthereumRpcError", "serialize", "toString", "EthereumProviderError", "error_constants_1", "classes_1", "arr", "arr2", "parse", "utils_1", "offset", "Buffer", "fill", "string", "array", "utf8ToBytes", "compare", "read", "i", "write", "byteLength", "src", "_a", "_b", "_c", "_EthereumProvider_getBloctoProperties", "_EthereumProvider_addToSwitchable", "_EthereumProvider_checkNetworkMatched", "ALPHABET", "encode", "j", "decode", "bs58", "server", "signature"]
}
