import {
  StandardErc721
} from "./chunk-LXNR34M2.js";
import {
  AbiSchema,
  ContractAppURI,
  ContractEncoder,
  ContractEvents,
  ContractInterceptor,
  ContractMetadata,
  ContractOwner,
  ContractPlatformFee,
  ContractPrimarySale,
  ContractRoles,
  ContractRoyalty,
  ContractWrapper,
  Erc721WithQuantitySignatureMintable,
  GasCostEstimator,
  NFT_BASE_CONTRACT_ROLES,
  TokenErc721ContractSchema,
  Transaction,
  buildTransactionFunction,
  getRoleHash,
  require_bs58,
  require_dist,
  require_fast_deep_equal
} from "./chunk-DICWWXMF.js";
import {
  require_utils
} from "./chunk-3M3Q5NYC.js";
import {
  require_browser_ponyfill
} from "./chunk-6KNAOAGL.js";
import "./chunk-DMOEZRHT.js";
import "./chunk-ADEMXSHQ.js";
import "./chunk-NS4NLLWV.js";
import {
  init_lib7 as init_lib
} from "./chunk-LSMB6K3F.js";
import {
  lib_exports8 as lib_exports
} from "./chunk-7GXO2BXT.js";
import "./chunk-NO757KM3.js";
import {
  require_bn
} from "./chunk-37L3W2XO.js";
import {
  init_shim
} from "./chunk-6SWLQQ3Q.js";
import {
  __publicField,
  __toESM
} from "./chunk-GN3OLCG2.js";

// node_modules/@thirdweb-dev/sdk/dist/nft-collection-cc528c0a.browser.esm.js
init_shim();
init_lib();
var import_bn = __toESM(require_bn());
var import_merkletreejs = __toESM(require_dist());
var import_fast_deep_equal = __toESM(require_fast_deep_equal());
var import_bs58 = __toESM(require_bs58());
var import_utils = __toESM(require_utils());
var import_cross_fetch = __toESM(require_browser_ponyfill());
var _NFTCollection = class extends StandardErc721 {
  constructor(network, address, storage) {
    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    let abi = arguments.length > 4 ? arguments[4] : void 0;
    let chainId = arguments.length > 5 ? arguments[5] : void 0;
    let contractWrapper = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);
    super(contractWrapper, storage, chainId);
    __publicField(this, "mint", buildTransactionFunction(async (metadata) => {
      return this.erc721.mint.prepare(metadata);
    }));
    __publicField(this, "mintTo", buildTransactionFunction(async (walletAddress, metadata) => {
      return this.erc721.mintTo.prepare(walletAddress, metadata);
    }));
    __publicField(this, "mintBatch", buildTransactionFunction(async (metadata) => {
      return this.erc721.mintBatch.prepare(metadata);
    }));
    __publicField(this, "mintBatchTo", buildTransactionFunction(async (walletAddress, metadata) => {
      return this.erc721.mintBatchTo.prepare(walletAddress, metadata);
    }));
    __publicField(this, "burn", buildTransactionFunction((tokenId) => {
      return this.erc721.burn.prepare(tokenId);
    }));
    this.abi = AbiSchema.parse(abi || []);
    this.metadata = new ContractMetadata(this.contractWrapper, TokenErc721ContractSchema, this.storage);
    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);
    this.roles = new ContractRoles(this.contractWrapper, _NFTCollection.contractRoles);
    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);
    this.sales = new ContractPrimarySale(this.contractWrapper);
    this.encoder = new ContractEncoder(this.contractWrapper);
    this.estimator = new GasCostEstimator(this.contractWrapper);
    this.events = new ContractEvents(this.contractWrapper);
    this.platformFees = new ContractPlatformFee(this.contractWrapper);
    this.interceptor = new ContractInterceptor(this.contractWrapper);
    this.signature = new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);
    this.owner = new ContractOwner(this.contractWrapper);
  }
  onNetworkUpdated(network) {
    this.contractWrapper.updateSignerOrProvider(network);
  }
  getAddress() {
    return this.contractWrapper.readContract.address;
  }
  async isTransferRestricted() {
    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash("transfer"), lib_exports.AddressZero);
    return !anyoneCanTransfer;
  }
  async getMintTransaction(receiver, metadata) {
    return this.erc721.getMintTransaction(receiver, metadata);
  }
  async prepare(method, args, overrides) {
    return Transaction.fromContractWrapper({
      contractWrapper: this.contractWrapper,
      method,
      args,
      overrides
    });
  }
  async call(functionName, args, overrides) {
    return this.contractWrapper.call(functionName, args, overrides);
  }
};
var NFTCollection = _NFTCollection;
__publicField(NFTCollection, "contractRoles", NFT_BASE_CONTRACT_ROLES);
export {
  NFTCollection
};
//# sourceMappingURL=nft-collection-cc528c0a.browser.esm-EKSQLW2L.js.map
