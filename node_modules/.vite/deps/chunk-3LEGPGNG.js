import {
  ConnectingScreen,
  isAndroid,
  isIOS,
  isMobile,
  openWindow
} from "./chunk-FYWESOGT.js";
import {
  useCreateWalletInstance,
  useWalletContext
} from "./chunk-CJ7GN3IJ.js";
import {
  require_jsx_runtime
} from "./chunk-3FPM5NHH.js";
import {
  require_react
} from "./chunk-U2VBBHZY.js";
import {
  init_shim
} from "./chunk-6SWLQQ3Q.js";
import {
  __toESM
} from "./chunk-GN3OLCG2.js";

// node_modules/@thirdweb-dev/react/dist/handleWCSessionRequest-785c9f07.browser.esm.js
init_shim();
var import_react = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var WCOpenURI = (_ref) => {
  let {
    onBack,
    onConnected,
    walletConfig,
    appUriPrefix,
    supportLink,
    hideBackButton
  } = _ref;
  const createInstance = useCreateWalletInstance();
  const {
    setConnectedWallet,
    chainToConnect,
    setConnectionStatus
  } = useWalletContext();
  const connectStarted = (0, import_react.useRef)(false);
  (0, import_react.useEffect)(() => {
    if (connectStarted.current) {
      return;
    }
    connectStarted.current = true;
    const wallet = createInstance(walletConfig);
    setConnectionStatus("connecting");
    wallet.connectWithQrCode({
      chainId: chainToConnect == null ? void 0 : chainToConnect.chainId,
      onQrCodeUri(uri) {
        if (isAndroid()) {
          openWindow(`${appUriPrefix.android}wc?uri=${encodeURIComponent(uri)}`);
        } else if (isIOS()) {
          openWindow(`${appUriPrefix.ios}wc?uri=${encodeURIComponent(uri)}`);
        } else {
          openWindow(`${appUriPrefix.other}wc?uri=${encodeURIComponent(uri)}`);
        }
      },
      onConnected() {
        setConnectedWallet(wallet);
        onConnected();
      }
    });
  }, [createInstance, setConnectedWallet, chainToConnect, onConnected, walletConfig, setConnectionStatus, appUriPrefix]);
  return (0, import_jsx_runtime.jsx)(ConnectingScreen, {
    hideBackButton,
    onBack,
    walletName: walletConfig.meta.name,
    walletIconURL: walletConfig.meta.iconURL,
    supportLink
  });
};
function handelWCSessionRequest(wallet, uris) {
  if (isMobile()) {
    wallet.on("wc_session_request_sent", () => {
      if (isAndroid()) {
        openWindow(uris.android);
      } else if (isIOS()) {
        openWindow(uris.ios);
      } else {
        openWindow(uris.other);
      }
    });
  }
}

export {
  WCOpenURI,
  handelWCSessionRequest
};
//# sourceMappingURL=chunk-3LEGPGNG.js.map
