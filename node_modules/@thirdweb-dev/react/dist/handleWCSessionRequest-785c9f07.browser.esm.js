import { useCreateWalletInstance, useWalletContext } from '@thirdweb-dev/react-core';
import { useRef, useEffect } from 'react';
import { r as isAndroid, o as openWindow, s as isIOS, C as ConnectingScreen, i as isMobile } from './headlessConnectUI-c1f84a4b.browser.esm.js';
import { jsx } from 'react/jsx-runtime';

const WCOpenURI = _ref => {
  let {
    onBack,
    onConnected,
    walletConfig,
    appUriPrefix,
    supportLink,
    hideBackButton
  } = _ref;
  const createInstance = useCreateWalletInstance();
  const {
    setConnectedWallet,
    chainToConnect,
    setConnectionStatus
  } = useWalletContext();
  const connectStarted = useRef(false);
  useEffect(() => {
    if (connectStarted.current) {
      return;
    }
    connectStarted.current = true;
    const wallet = createInstance(walletConfig);
    setConnectionStatus("connecting");
    wallet.connectWithQrCode({
      chainId: chainToConnect?.chainId,
      onQrCodeUri(uri) {
        if (isAndroid()) {
          openWindow(`${appUriPrefix.android}wc?uri=${encodeURIComponent(uri)}`);
        } else if (isIOS()) {
          openWindow(`${appUriPrefix.ios}wc?uri=${encodeURIComponent(uri)}`);
        } else {
          openWindow(`${appUriPrefix.other}wc?uri=${encodeURIComponent(uri)}`);
        }
      },
      onConnected() {
        setConnectedWallet(wallet);
        onConnected();
      }
    });
  }, [createInstance, setConnectedWallet, chainToConnect, onConnected, walletConfig, setConnectionStatus, appUriPrefix]);
  return /*#__PURE__*/jsx(ConnectingScreen, {
    hideBackButton: hideBackButton,
    onBack: onBack,
    walletName: walletConfig.meta.name,
    walletIconURL: walletConfig.meta.iconURL,
    supportLink: supportLink
  });
};

function handelWCSessionRequest(wallet, uris) {
  if (isMobile()) {
    wallet.on("wc_session_request_sent", () => {
      if (isAndroid()) {
        openWindow(uris.android);
      } else if (isIOS()) {
        openWindow(uris.ios);
      } else {
        openWindow(uris.other);
      }
    });
  }
}

export { WCOpenURI as W, handelWCSessionRequest as h };
